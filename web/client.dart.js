// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.JSInvocationMirror = {"": "Object;memberName>,_internalName,_kind,_liblib5$_arguments,_namedArgumentNames,_namedIndices",
  get$isMethod: function() {
    return $.$$eq$o(this._kind, 0);
  },
  get$isGetter: function() {
    return $.$$eq$o(this._kind, 1);
  },
  get$isSetter: function() {
    return $.$$eq$o(this._kind, 2);
  },
  get$isAccessor: function() {
    return $.$$eq$o(this._kind, 0) !== true;
  },
  get$positionalArguments: function() {
    var list, t1, t3, t4, argumentCount, index;
    if (this.get$isGetter() === true)
      return;
    list = [];
    t1 = this._liblib5$_arguments;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.get$positionalArguments$bailout(1, t1, list);
    t3 = t1.length;
    t4 = $.get$length$as(this._namedArgumentNames);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    argumentCount = t3 - t4;
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      list.push(t1[index]);
    }
    return list;
  },
  get$positionalArguments$bailout: function(state0, t1, list, t3, argumentCount) {
    switch (state0) {
      case 0:
        if (this.get$isGetter() === true)
          return;
        list = [];
        t1 = this._liblib5$_arguments;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$as(t1);
        argumentCount = $.$$sub$n(t3.get$length(t1), $.get$length$as(this._namedArgumentNames));
      case 2:
        var index;
        state0 = 0;
        for (index = 0; $.CONSTANT7.$lt(index, argumentCount); ++index)
          list.push(t3.$index(t1, index));
        return list;
    }
  },
  get$namedArguments: function() {
    var map, t1, t3, namedArgumentCount, t4, namedArgumentsStartIndex, i, t2;
    if (this.get$isAccessor() === true)
      return;
    map = $.makeLiteralMap([]);
    t1 = this._namedArgumentNames;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.get$namedArguments$bailout(1, t1, map);
    t3 = $.getInterceptor$as(t1);
    namedArgumentCount = t1.length;
    t4 = this._liblib5$_arguments;
    if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior()))
      return this.get$namedArguments$bailout(3, t1, map, t3, namedArgumentCount, t4);
    namedArgumentsStartIndex = t4.length - namedArgumentCount;
    for (i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      t3 = namedArgumentsStartIndex + i;
      if (t3 < 0 || t3 >= t4.length)
        throw $.ioore(t3);
      map.$indexSet(map, t2, t4[t3]);
    }
    return map;
  },
  get$namedArguments$bailout: function(state0, t1, map, t3, namedArgumentCount, t5, t7, namedArgumentsStartIndex) {
    switch (state0) {
      case 0:
        if (this.get$isAccessor() === true)
          return;
        map = $.makeLiteralMap([]);
        t1 = this._namedArgumentNames;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$as(t1);
        namedArgumentCount = t3.get$length(t1);
      case 2:
        state0 = 0;
        t5 = this._liblib5$_arguments;
      case 3:
        state0 = 0;
        t7 = $.getInterceptor$as(t5);
        namedArgumentsStartIndex = $.$$sub$n(t7.get$length(t5), namedArgumentCount);
      case 4:
        var t2, i;
        state0 = 0;
        for (t2 = $.getInterceptor$n(namedArgumentsStartIndex), i = 0; $.CONSTANT7.$lt(i, namedArgumentCount); ++i)
          map.$indexSet(map, t3.$index(t1, i), t7.$index(t5, t2.$add(namedArgumentsStartIndex, i)));
        return map;
    }
  }
};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0$abfnosu(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = this._nativeRegExp.exec($.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.get$length$as($.$$index$as(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test($.checkString(str));
  },
  allMatches$1: function(_, str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  $index: function(_, index) {
    var t1 = this._groups;
    if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib5$_current",
  get$current: function() {
    return this._liblib5$_current;
  },
  moveNext$0: function() {
    this._liblib5$_current = this._re.firstMatch$1(this._str);
    return this._liblib5$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(_, g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq$o(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$a(elements); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  }
};

$$.Duration = {"": "Object;_duration>",
  $add: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 + t3, 0, 0, 0);
  },
  $$add$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$add$n(t1, t3), 0, 0, 0);
    }
  },
  $sub: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 - t3, 0, 0, 0);
  },
  $$sub$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$sub$n(t1, t3), 0, 0, 0);
    }
  },
  $mul: function(_, factor) {
    var t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$mul$bailout(1, factor, t1);
    return $.Duration$(0, 0, t1 * factor, 0, 0, 0);
  },
  $$mul$bailout: function(state0, factor, t1) {
    return $.Duration$(0, 0, $.$$mul$n(t1, factor), 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.$$throw($.IntegerDivisionByZeroException$());
    return $.Duration$(0, 0, $.$$tdiv$n(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$$lt$n(t1, t3);
    }
  },
  $gt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$$gt$n(t1, t3);
    }
  },
  $le: function(_, other) {
    return $.$$le$n(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return $.$$ge$n(this._duration, other.get$_duration());
  },
  get$inHours: function() {
    return $.$$tdiv$n(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.$$tdiv$n(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.$$tdiv$n(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.$$tdiv$n(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return $.$$eq$o(this._duration, other._duration);
  },
  get$hashCode: function(_) {
    return $.get$hashCode$abnosu(this._duration);
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if ($.$$lt$n(this.get$inMicroseconds(), 0) === true)
      return "-" + $.S($.Duration$(0, 0, $.$$negate$n(this.get$inMicroseconds()), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.remainder$1$n(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.remainder$1$n(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.remainder$1$n(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$$add$n(t1.i_1, 1)) {
      if ($.$$gt$n(t1.i_1, 0) === true)
        $.add$1$a(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add$1$a(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$a(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(2, t1, t2);
    actualParameters = $.toString$0$abfnosu(t1.sb_0);
    t1.sb_0 = $.StringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add$1$a(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add$1$a(t3, t2[i]);
    }
    formalParameters = $.toString$0$abfnosu(t1.sb_0);
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (t2 != null)
          for (t3 = $.getInterceptor$as(t2); $.$$lt$n(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add$n(t1.i_1, 1)) {
            if ($.$$gt$n(t1.i_1, 0) === true)
              $.add$1$a(t1.sb_0, ", ");
            $.add$1$a(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (t2 != null)
          $.forEach$1$a(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.toString$0$abfnosu(t1.sb_0);
          t1.sb_0 = $.StringBuffer$("");
          for (t3 = $.getInterceptor$as(t2), i = 0; $.CONSTANT7.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0)
              $.add$1$a(t1.sb_0, ", ");
            $.add$1$a(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.toString$0$abfnosu(t1.sb_0);
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.InvocationMirror = {"": "Object;"};

$$.Iterable = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n);
  },
  elementAt$1: function(_, index) {
    var t1, remaining, t2;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (remaining === 0)
        return t2;
      --remaining;
    }
    throw $.$$throw($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, t2, t3;
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor(remaining);
      if (t3.$eq(remaining, 0) === true)
        return t2;
      remaining = t3.$sub(remaining, 1);
    }
    throw $.$$throw($.RangeError$value(index));
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(receiver, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(_);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(_)) + "'";
  },
  noSuchMethod$1: function(_, invocation) {
    throw $.$$throw($.NoSuchMethodError$(_, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  allMatches$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
  },
  setAnimation$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setAnimation", "setAnimation$1", 0, [$0], []));
  },
  codeUnitAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
  },
  $$dom_addEventListener$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
  },
  moveNext$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("moveNext", "moveNext$0", 0, [], []));
  },
  $sub: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("-", "$sub", 0, [$0], []));
  },
  setMap$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setMap", "setMap$1", 0, [$0], []));
  },
  concat$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("concat", "concat$1", 0, [$0], []));
  },
  elementAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("elementAt", "elementAt$1", 0, [$0], []));
  },
  remove$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$0", 0, [], []));
  },
  remove$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$1", 0, [$0], []));
  },
  startsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
  },
  _key$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_key", "_key$1", 0, [$0], []));
  },
  callSync$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
  },
  $le: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<=", "$le", 0, [$0], []));
  },
  contains$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contains", "contains$2", 0, [$0, $1], []));
  },
  unregister$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("unregister", "unregister$1", 0, [$0], []));
  },
  _checkModification$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_checkModification", "_checkModification$1", 0, [$0], []));
  },
  add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  setDraggable$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setDraggable", "setDraggable$1", 0, [$0], []));
  },
  $mul: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("*", "$mul", 0, [$0], []));
  },
  _sendDone$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_sendDone", "_sendDone$0", 0, [], []));
  },
  get$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("get", "get$1", 0, [$0], []));
  },
  addAll$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
  },
  _isFree$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isFree", "_isFree$1", 0, [$0], []));
  },
  _next$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_next", "_next$1", 0, [$0], []));
  },
  _sendError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_sendError", "_sendError$1", 0, [$0], []));
  },
  register$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
  },
  complete$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("complete", "complete$1", 0, [$0], []));
  },
  remainder$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remainder", "remainder$1", 0, [$0], []));
  },
  completeError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("completeError", "completeError$1", 0, [$0], []));
  },
  completeError$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("completeError", "completeError$2", 0, [$0, $1], []));
  },
  map$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("map", "map$1", 0, [$0], []));
  },
  toSendPort$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
  },
  setRange$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setRange", "setRange$4", 0, [$0, $1, $2, $3], []));
  },
  enterScope$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("enterScope", "enterScope$0", 0, [], []));
  },
  $$dom_setAttribute$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_setAttribute", "$$dom_setAttribute$2", 0, [$0, $1], []));
  },
  _writeOn$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_writeOn", "_writeOn$1", 0, [$0], []));
  },
  postMessage$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
  },
  then$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("then", "then$1", 0, [$0], []));
  },
  then$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("then", "then$2$onError", 0, [$0, $1], ["onError"]));
  },
  indexOf$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
  },
  indexOf$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
  },
  $tdiv: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("~/", "$tdiv", 0, [$0], []));
  },
  setContent$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setContent", "setContent$1", 0, [$0], []));
  },
  throwDelayed$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("throwDelayed", "throwDelayed$0", 0, [], []));
  },
  $indexSet: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
  },
  $shl: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<<", "$shl", 0, [$0], []));
  },
  $lt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<", "$lt", 0, [$0], []));
  },
  setIcon$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setIcon", "setIcon$1", 0, [$0], []));
  },
  invalidate$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("invalidate", "invalidate$1", 0, [$0], []));
  },
  setPosition$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setPosition", "setPosition$1", 0, [$0], []));
  },
  $and: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("&", "$and", 0, [$0], []));
  },
  whenComplete$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("whenComplete", "whenComplete$1", 0, [$0], []));
  },
  send$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  call$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$0", 0, [], []));
  },
  call$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$1", 0, [$0], []));
  },
  call$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
  },
  call$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
  },
  call$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  call$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
  },
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  call$2$test: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$test", 0, [$0, $1], ["test"]));
  },
  call$4$onDone$onError$unsubscribeOnError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$4$onDone$onError$unsubscribeOnError", 0, [$0, $1, $2, $3], ["onDone", "onError", "unsubscribeOnError"]));
  },
  $$dom_removeChild$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_removeChild", "$$dom_removeChild$1", 0, [$0], []));
  },
  setMapTypeId$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setMapTypeId", "setMapTypeId$1", 0, [$0], []));
  },
  setCenter$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setCenter", "setCenter$1", 0, [$0], []));
  },
  toJson$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toJson", "toJson$0", 0, [], []));
  },
  _sendData$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_sendData", "_sendData$1", 0, [$0], []));
  },
  _put$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_put", "_put$1", 0, [$0], []));
  },
  $index: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]", "$index", 0, [$0], []));
  },
  replaceWith$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
  },
  _setGlobals$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setGlobals", "_setGlobals$0", 0, [], []));
  },
  setZoom$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setZoom", "setZoom$1", 0, [$0], []));
  },
  $ge: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">=", "$ge", 0, [$0], []));
  },
  _sendValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_sendValue", "_sendValue$1", 0, [$0], []));
  },
  replaceAll$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
  },
  open$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("open", "open$2", 0, [$0, $1], []));
  },
  lookup$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
  },
  skip$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("skip", "skip$1", 0, [$0], []));
  },
  $$dom_removeEventListener$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3", 0, [$0, $1, $2], []));
  },
  cleanup$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
  },
  hasMatch$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("hasMatch", "hasMatch$1", 0, [$0], []));
  },
  $$dom_getAttribute$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_getAttribute", "$$dom_getAttribute$1", 0, [$0], []));
  },
  close$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("close", "close$0", 0, [], []));
  },
  run$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("run", "run$0", 0, [], []));
  },
  substring$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  substring$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  _checkCapacity$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_checkCapacity", "_checkCapacity$0", 0, [], []));
  },
  $shr: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">>", "$shr", 0, [$0], []));
  },
  toList$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  $$dom_replaceChild$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
  },
  $$dom_hasAttribute$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_hasAttribute", "$$dom_hasAttribute$1", 0, [$0], []));
  },
  _setError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setError", "_setError$1", 0, [$0], []));
  },
  listen$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("listen", "listen$1", 0, [$0], []));
  },
  listen$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("listen", "listen$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  $$dom_initCustomEvent$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_initCustomEvent", "$$dom_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
  },
  $or: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("|", "$or", 0, [$0], []));
  },
  forEach$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  endsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
  },
  toJs$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toJs", "toJs$0", 0, [], []));
  },
  globalize$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("globalize", "globalize$1", 0, [$0], []));
  },
  $add: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("+", "$add", 0, [$0], []));
  },
  dispose$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("dispose", "dispose$0", 0, [], []));
  },
  _liblib1$_setValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setValue", "_liblib1$_setValue$1", 0, [$0], []));
  },
  _setValue$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setValue", "_setValue$2", 0, [$0, $1], []));
  },
  containsKey$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
  },
  exitScope$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("exitScope", "exitScope$0", 0, [], []));
  },
  $gt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">", "$gt", 0, [$0], []));
  },
  process$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("process", "process$0", 0, [], []));
  },
  enqueue$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("enqueue", "enqueue$3", 0, [$0, $1, $2], []));
  },
  cancel$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cancel", "cancel$0", 0, [], []));
  },
  $negate: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("unary-", "$negate", 0, [], []));
  },
  _callback$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callback", "_callback$1", 0, [$0], []));
  },
  _liblib6$_callback$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callback", "_liblib6$_callback$2", 0, [$0, $1], []));
  },
  catchError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("catchError", "catchError$1", 0, [$0], []));
  },
  catchError$2$test: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("catchError", "catchError$2$test", 0, [$0, $1], ["test"]));
  },
  terminate$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("terminate", "terminate$0", 0, [], []));
  },
  $$dom_appendChild$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_appendChild", "$$dom_appendChild$1", 0, [$0], []));
  },
  getMap$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getMap", "getMap$0", 0, [], []));
  },
  reset$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("reset", "reset$0", 0, [], []));
  },
  eval$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("eval", "eval$1", 0, [$0], []));
  },
  addListener$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("addListener", "addListener$3", 0, [$0, $1, $2], []));
  },
  removeLast$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  get$google: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("google", "get$google", 1, [], []));
  },
  get$_duration: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_duration", "get$_duration", 1, [], []));
  },
  get$_liblib6$_id: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_id", "get$_liblib6$_id", 1, [], []));
  },
  get$_hasUnhandledError: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_hasUnhandledError", "get$_hasUnhandledError", 1, [], []));
  },
  get$onError: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onError", "get$onError", 1, [], []));
  },
  get$DROP: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("DROP", "get$DROP", 1, [], []));
  },
  get$memberName: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("memberName", "get$memberName", 1, [], []));
  },
  get$$$dom_attributes: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_attributes", "get$$$dom_attributes", 1, [], []));
  },
  get$StreetViewPanorama: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("StreetViewPanorama", "get$StreetViewPanorama", 1, [], []));
  },
  get$namedArguments: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("namedArguments", "get$namedArguments", 1, [], []));
  },
  get$Animation: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("Animation", "get$Animation", 1, [], []));
  },
  get$_set: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_set", "get$_set", 1, [], []));
  },
  get$userAgent: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("userAgent", "get$userAgent", 1, [], []));
  },
  get$isCaseSensitive: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isCaseSensitive", "get$isCaseSensitive", 1, [], []));
  },
  get$sb: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("sb", "get$sb", 1, [], []));
  },
  get$_table: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_table", "get$_table", 1, [], []));
  },
  get$length: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length", "get$length", 1, [], []));
  },
  get$isWorker: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isWorker", "get$isWorker", 1, [], []));
  },
  get$future: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("future", "get$future", 1, [], []));
  },
  get$iterator: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  get$cause: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cause", "get$cause", 1, [], []));
  },
  get$id: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("id", "get$id", 1, [], []));
  },
  get$parent: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("parent", "get$parent", 1, [], []));
  },
  get$value: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("value", "get$value", 1, [], []));
  },
  get$_entrySize: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_entrySize", "get$_entrySize", 1, [], []));
  },
  get$InfoWindow: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("InfoWindow", "get$InfoWindow", 1, [], []));
  },
  get$isMethod: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isMethod", "get$isMethod", 1, [], []));
  },
  get$maps: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("maps", "get$maps", 1, [], []));
  },
  get$_proxy: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_proxy", "get$_proxy", 1, [], []));
  },
  get$readyState: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("readyState", "get$readyState", 1, [], []));
  },
  get$_resultOrListeners: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_resultOrListeners", "get$_resultOrListeners", 1, [], []));
  },
  get$onClick: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onClick", "get$onClick", 1, [], []));
  },
  get$keys: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("keys", "get$keys", 1, [], []));
  },
  get$status: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("status", "get$status", 1, [], []));
  },
  get$MapTypeId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("MapTypeId", "get$MapTypeId", 1, [], []));
  },
  get$positionalArguments: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("positionalArguments", "get$positionalArguments", 1, [], []));
  },
  get$isGetter: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isGetter", "get$isGetter", 1, [], []));
  },
  get$LatLng: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("LatLng", "get$LatLng", 1, [], []));
  },
  get$pattern: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("pattern", "get$pattern", 1, [], []));
  },
  get$_elementCount: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_elementCount", "get$_elementCount", 1, [], []));
  },
  get$sendPort: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("sendPort", "get$sendPort", 1, [], []));
  },
  get$_hashTable: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_hashTable", "get$_hashTable", 1, [], []));
  },
  get$_portId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_portId", "get$_portId", 1, [], []));
  },
  get$children: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("children", "get$children", 1, [], []));
  },
  get$_modificationCount: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_modificationCount", "get$_modificationCount", 1, [], []));
  },
  get$Date: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("Date", "get$Date", 1, [], []));
  },
  get$_registry: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_registry", "get$_registry", 1, [], []));
  },
  get$responseText: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("responseText", "get$responseText", 1, [], []));
  },
  get$attributes: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("attributes", "get$attributes", 1, [], []));
  },
  get$result: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("result", "get$result", 1, [], []));
  },
  get$$$dom_namespaceUri: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_namespaceUri", "get$$$dom_namespaceUri", 1, [], []));
  },
  get$activeTimerCount: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("activeTimerCount", "get$activeTimerCount", 1, [], []));
  },
  get$topEventLoop: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("topEventLoop", "get$topEventLoop", 1, [], []));
  },
  get$error: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("error", "get$error", 1, [], []));
  },
  get$Map: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("Map", "get$Map", 1, [], []));
  },
  get$$$dom_localName: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_localName", "get$$$dom_localName", 1, [], []));
  },
  get$_scopeIndices: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_scopeIndices", "get$_scopeIndices", 1, [], []));
  },
  get$ROADMAP: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ROADMAP", "get$ROADMAP", 1, [], []));
  },
  get$documentElement: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("documentElement", "get$documentElement", 1, [], []));
  },
  get$detail: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("detail", "get$detail", 1, [], []));
  },
  get$$$dom_childNodes: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_childNodes", "get$$$dom_childNodes", 1, [], []));
  },
  get$nextIsolateId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("nextIsolateId", "get$nextIsolateId", 1, [], []));
  },
  get$_state: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_state", "get$_state", 1, [], []));
  },
  get$_liblib6$_receivePort: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_receivePort", "get$_liblib6$_receivePort", 1, [], []));
  },
  get$isEmpty: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  get$currentContext: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("currentContext", "get$currentContext", 1, [], []));
  },
  get$Marker: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("Marker", "get$Marker", 1, [], []));
  },
  get$$$dom_lastElementChild: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_lastElementChild", "get$$$dom_lastElementChild", 1, [], []));
  },
  get$isMultiLine: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isMultiLine", "get$isMultiLine", 1, [], []));
  },
  get$_liblib6$_callback: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callback", "get$_liblib6$_callback", 1, [], []));
  },
  get$event: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("event", "get$event", 1, [], []));
  },
  get$_nextListener: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_nextListener", "get$_nextListener", 1, [], []));
  },
  get$$$dom_body: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_body", "get$$$dom_body", 1, [], []));
  },
  get$ports: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ports", "get$ports", 1, [], []));
  },
  get$nodes: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("nodes", "get$nodes", 1, [], []));
  },
  get$_tag: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_tag", "get$_tag", 1, [], []));
  },
  get$_liblib6$_isolateId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isolateId", "get$_liblib6$_isolateId", 1, [], []));
  },
  get$current: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("current", "get$current", 1, [], []));
  },
  get$stackTrace: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stackTrace", "get$stackTrace", 1, [], []));
  },
  get$isSetter: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isSetter", "get$isSetter", 1, [], []));
  },
  get$navigator: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("navigator", "get$navigator", 1, [], []));
  },
  get$_workerId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_workerId", "get$_workerId", 1, [], []));
  },
  get$_jsProxy: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_jsProxy", "get$_jsProxy", 1, [], []));
  },
  get$onSuccess: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onSuccess", "get$onSuccess", 1, [], []));
  },
  set$position: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("position=", "set$position", 2, [$0], []));
  },
  set$_state: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_state=", "set$_state", 2, [$0], []));
  },
  set$activeTimerCount: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("activeTimerCount=", "set$activeTimerCount", 2, [$0], []));
  },
  set$coords: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("coords=", "set$coords", 2, [$0], []));
  },
  set$icon: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("icon=", "set$icon", 2, [$0], []));
  },
  set$center: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("center=", "set$center", 2, [$0], []));
  },
  set$mapTypeId: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("mapTypeId=", "set$mapTypeId", 2, [$0], []));
  },
  set$map: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("map=", "set$map", 2, [$0], []));
  },
  set$content: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("content=", "set$content", 2, [$0], []));
  },
  set$url: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("url=", "set$url", 2, [$0], []));
  },
  set$innerHtml: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("innerHtml=", "set$innerHtml", 2, [$0], []));
  },
  set$_handle: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_handle=", "set$_handle", 2, [$0], []));
  },
  set$animation: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("animation=", "set$animation", 2, [$0], []));
  },
  set$nextIsolateId: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("nextIsolateId=", "set$nextIsolateId", 2, [$0], []));
  },
  set$zoom: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("zoom=", "set$zoom", 2, [$0], []));
  },
  set$_nextListener: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_nextListener=", "set$_nextListener", 2, [$0], []));
  },
  set$type: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("type=", "set$type", 2, [$0], []));
  },
  set$shape: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("shape=", "set$shape", 2, [$0], []));
  },
  set$draggable: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("draggable=", "set$draggable", 2, [$0], []));
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return $.get$length$as(this._contents);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  add$1: function(_, obj) {
    return this.write$1(obj);
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeln$1: function(obj) {
    this.write$1(obj);
    this.write$1("\n");
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$a(objects); t1.moveNext$0() === true;)
      this.write$1(t1.get$current());
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    if (typeof $content === "string")
      this._contents = $content;
    else
      this.write$1($content);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq$o(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$a(collection); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  skip$1: function(receiver, n) {
    return $.IterableMixinWorkaround_skipList(receiver, n);
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, $length) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if ($length === 0)
      return;
    $.checkNull(start);
    $.checkNull($length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - $length;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isJSNumber: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  concat$1: function(receiver, other) {
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  startsWith$1: function(receiver, other) {
    var otherLength;
    $.checkString(other);
    otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt$n(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.ListQueue = {"": "Collection;_table>,_head,_tail,_modificationCount>",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, i0, t1;
    modificationCount = this._modificationCount;
    i = this._head;
    if (i !== (i | 0))
      return this.forEach$1$bailout1(1, action, modificationCount, i);
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, modificationCount, i) {
    var i0, t1;
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    var t1, t3;
    t1 = this._tail;
    if (t1 !== (t1 | 0))
      return this.get$length$bailout1(1, t1);
    t3 = this._head;
    if (t3 !== (t3 | 0))
      return this.get$length$bailout1(2, t1, t3);
    return (t1 - t3 & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._tail;
      case 1:
        state0 = 0;
        t3 = this._head;
      case 2:
        state0 = 0;
        t3 = $.$$sub$n(t1, t3);
      case 3:
        state0 = 0;
        return $.$$and$n(t3, this._table.length - 1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3, t4;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, this.get$length(this)) === true)
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t4 = (t2 + index & t3 - 1) >>> 0;
    if (t4 < 0 || t4 >= t3)
      throw $.ioore(t4);
    return t1[t4];
  },
  toList$1$growable: function(_, growable) {
    var t1, list;
    if (growable === true) {
      t1 = this.get$length(this);
      list = $.List_List($);
      $.CONSTANT2.set$length(list, t1);
    } else
      list = $.List_List(this.get$length(this));
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || elements.$isList())) {
      addCount = $.get$length$as(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.CONSTANT2.setRange$4(this._table, $length, addCount, elements, 0);
        this._tail = $.$$add$n(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.CONSTANT2.setRange$4(t2, t1, addCount, elements, 0);
          this._tail = $.$$add$n(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.CONSTANT2.setRange$4(t2, t1, endSpace, elements, 0);
          $.CONSTANT2.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = $.$$add$n(this._modificationCount, 1);
    } else
      for (t1 = $.get$iterator$a(elements); t1.moveNext$0() === true;)
        this._add$1(t1.get$current());
  },
  remove$1: function(_, object) {
    var i, i0, t1;
    i = this._head;
    if (i !== (i | 0))
      return this.remove$1$bailout1(1, object, i);
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq$o(t1[i], object) === true) {
        this._remove$1(i);
        return;
      }
    }
    this._modificationCount = $.$$add$n(this._modificationCount, 1);
  },
  remove$1$bailout1: function(state0, object, i) {
    var i0, t1;
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq$o(t1[i], object) === true) {
        this._remove$1(i);
        return;
      }
    }
    this._modificationCount = $.$$add$n(this._modificationCount, 1);
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(_, element) {
    this._add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$$add$n(this._modificationCount, 1);
    t1 = this._table;
    t2 = this._head;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$$add$n(this._modificationCount, 1);
    this._tail = $.$$and$n($.$$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if ($.$$eq$o(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this._add$1$bailout(1, t1);
    this._modificationCount = t1 + 1;
  },
  _add$1$bailout: function(state0, t1) {
    this._modificationCount = $.$$add$n(t1, 1);
  },
  _remove$1: function(offset) {
    var mask, t1, t2, i, t3, prevOffset, nextOffset;
    if (offset !== (offset | 0))
      return this._remove$1$bailout(1, offset);
    mask = this._table.length - 1;
    if ((offset - this._head & mask) >>> 0 < $.$$and$n($.$$sub$n(this._tail, offset), mask)) {
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._head, i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t3 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = $.$$and$n($.$$sub$n(this._tail, 1), mask);
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset) {
    var mask, t1, i, t2, prevOffset, t3, t4, t5, nextOffset;
    mask = this._table.length - 1;
    t1 = $.getInterceptor$n(offset);
    if ($.$$and$n(t1.$sub(offset, this._head), mask) < $.$$and$n($.$$sub$n(this._tail, offset), mask)) {
      for (i = offset; t2 = $.getInterceptor(i), t2.$eq(i, this._head) !== true; i = prevOffset) {
        prevOffset = $.$$and$n(t2.$sub(i, 1), mask);
        t3 = this._table;
        if (prevOffset !== (prevOffset | 0))
          throw $.iae(prevOffset);
        t4 = t3.length;
        if (prevOffset < 0 || prevOffset >= t4)
          throw $.ioore(prevOffset);
        t5 = t3[prevOffset];
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= t4)
          throw $.ioore(i);
        t3[i] = t5;
      }
      t2 = this._table;
      t3 = this._head;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return $.$$and$n(t1.$add(offset, 1), mask);
    } else {
      this._tail = $.$$and$n($.$$sub$n(this._tail, 1), mask);
      for (i = offset; t1 = $.getInterceptor(i), t1.$eq(i, this._tail) !== true; i = nextOffset) {
        nextOffset = $.$$and$n(t1.$add(i, 1), mask);
        t2 = this._table;
        if (nextOffset !== (nextOffset | 0))
          throw $.iae(nextOffset);
        t3 = t2.length;
        if (nextOffset < 0 || nextOffset >= t3)
          throw $.ioore(nextOffset);
        t4 = t2[nextOffset];
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = t4;
      }
      t1 = this._table;
      t2 = this._tail;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, t3, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = t1.length;
    t3 = this._head;
    split = t2 - t3;
    $.CONSTANT2.setRange$4(newTable, 0, split, t1, t3);
    $.CONSTANT2.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.CONSTANT7.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$$sub$n(this._tail, t2);
      $.CONSTANT2.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.CONSTANT2.setRange$4(target, 0, firstPartSize, t1, t2);
      $.CONSTANT2.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$$add$n(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount));
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.$$lt$n(initialCapacity, 8) === true)
      initialCapacity = 8;
    else if ($.ListQueue__isPowerOf2(initialCapacity) !== true)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asCollection: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount>,_liblib$_position,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3, t4;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    if ($.$$eq$o(this._liblib$_position, this._end) === true) {
      this._liblib$_current = null;
      return false;
    }
    t2 = t1._table;
    t3 = this._liblib$_position;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    this._liblib$_current = t2[t3];
    t4 = this._liblib$_position;
    if (t4 !== (t4 | 0))
      return this.moveNext$0$bailout(1, t4, t1);
    this._liblib$_position = (t4 + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  moveNext$0$bailout: function(state0, t4, t1) {
    switch (state0) {
      case 0:
        t1 = this._queue;
        t1._checkModification$1(this._modificationCount);
        if ($.$$eq$o(this._liblib$_position, this._end) === true) {
          this._liblib$_current = null;
          return false;
        }
        t2 = t1._table;
        t3 = this._liblib$_position;
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t2.length)
          throw $.ioore(t3);
        this._liblib$_current = t2[t3];
        t4 = this._liblib$_position;
      case 1:
        state0 = 0;
        t4 = $.$$add$n(t4, 1);
      case 2:
        var t2, t3;
        state0 = 0;
        this._liblib$_position = $.$$and$n(t4, t1._table.length - 1);
        return true;
    }
  }
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function(_) {
    return $.CONSTANT5.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;_table>,_capacity,_entryCount,_liblib$_deletedCount,_modificationCount>,_container",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.CONSTANT4)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$$index$as(t1, offset);
    if (key !== $.CONSTANT4)
      return key;
    return;
  },
  get$_elementCount: function() {
    return $.$$sub$n(this._entryCount, this._liblib$_deletedCount);
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$$mul$n(capacity, this.get$_entrySize()));
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t1 = $.$$sub$n(capacity, 1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return (previousIndex + probeCount & t1) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.CONSTANT3;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$$and$n(hashCode, $.$$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$$index$as(this._table, offset);
      if (entry === $.CONSTANT3) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.CONSTANT4 === entry ? t1 : $.$$eq$o(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$$and$n(hashCode, $.$$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$$index$as(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.CONSTANT3 !== entry)
        if (($.CONSTANT4 === entry ? t1 : $.$$eq$o(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _checkCapacity$0: function() {
    var freeCount, t1;
    freeCount = $.$$sub$n(this._capacity, this._entryCount);
    t1 = $.getInterceptor$n(freeCount);
    if ($.$$lt$n(t1.$mul(freeCount, 4), this._capacity) === true || t1.$lt(freeCount, this._liblib$_deletedCount) === true)
      this._grow$1($.$$sub$n(this._entryCount, this._liblib$_deletedCount));
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = $.$$mul$n(contentCount, 2);
    if (typeof minCapacity !== "number")
      return this._grow$1$bailout(2, 0, capacity, minCapacity);
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._liblib$_deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity, minCapacity) {
    switch (state0) {
      case 0:
        capacity = this._capacity;
      case 1:
        state0 = 0;
        minCapacity = $.$$mul$n(contentCount, 2);
      case 2:
        var t1, oldTable;
        state0 = 0;
        for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity) === true;)
          capacity = t1.$mul(capacity, 2);
        oldTable = this._table;
        this._table = this._createTable$1(capacity);
        this._capacity = capacity;
        this._entryCount = 0;
        this._liblib$_deletedCount = 0;
        this._addAllEntries$1(oldTable);
        this._recordModification$0();
    }
  },
  _addAllEntries$1: function(oldTable) {
    var i, t1, object;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._addAllEntries$1$bailout(1, oldTable);
    for (i = 0; t1 = oldTable.length, i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.CONSTANT3))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$as(oldTable), i = 0; $.CONSTANT7.$lt(i, t1.get$length(oldTable)); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.CONSTANT3))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$abnosu(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._put$1$bailout(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(2, key, t1, offset);
      this._entryCount = t1 + 1;
    } else if (oldEntry === $.CONSTANT3) {
      t1 = this._liblib$_deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(3, key, t1, offset);
      this._liblib$_deletedCount = t1 - 1;
    } else
      return offset;
    if (key == null)
      key = $.CONSTANT4;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$$index$as(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry == null)
          switch (state0) {
            case 0:
              t1 = this._entryCount;
            case 2:
              state0 = 0;
              this._entryCount = $.$$add$n(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry === $.CONSTANT3)
                switch (state0) {
                  case 0:
                    t1 = this._liblib$_deletedCount;
                  case 3:
                    state0 = 0;
                    this._liblib$_deletedCount = $.$$sub$n(t1, 1);
                }
              else
                return offset;
          }
        if (key == null)
          key = $.CONSTANT4;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$$indexSet$a(t1, offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _remove$1: function(key) {
    var offset = this._probeForLookup$2($.get$hashCode$abnosu(key), key);
    if ($.$$ge$n(offset, 0) === true)
      this._deleteEntry$1(offset);
    return offset;
  },
  _deleteEntry$1: function(offset) {
    var key = $.CONSTANT3.$eq($.CONSTANT3, null) ? $.CONSTANT4 : $.CONSTANT3;
    $.$$indexSet$a(this._table, offset, key);
    this._liblib$_deletedCount = $.$$add$n(this._liblib$_deletedCount, 1);
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterable = {"": "Iterable;_hashTable>",
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._hashTable.get$_elementCount(), 0);
  },
  forEach$1: function(_, action) {
    var t1, entrySize, table, modificationCount, offset, t2, entry;
    t1 = this._hashTable;
    entrySize = t1.get$_entrySize();
    table = t1._table;
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.forEach$1$bailout1(1, action, entrySize, t1, table);
    modificationCount = t1._modificationCount;
    for (offset = 0; t2 = table.length, offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, entrySize, t1, table) {
    var modificationCount, t2, offset, entry;
    modificationCount = t1._modificationCount;
    for (t2 = $.getInterceptor$as(table), offset = 0; $.CONSTANT7.$lt(offset, t2.get$length(table)); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  }
};

$$._HashTableIterator = {"": "Object;_hashTable>,_modificationCount>",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1.get$_table();
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.moveNext$0$bailout(1, t1, table);
    entrySize = t1.get$_entrySize();
    for (; t2 = this._offset, t3 = table.length, t2 < t3;) {
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t3)
        throw $.ioore(t2);
      entry = table[t2];
      this._offset = t2 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib$_current = this._valueAt$2(t2, entry);
        return true;
      }
    }
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, table, entrySize, t3, t2, t4) {
    switch (state0) {
      case 0:
        t1 = this._hashTable;
        t1._checkModification$1(this._modificationCount);
        table = t1.get$_table();
      case 1:
        state0 = 0;
        entrySize = t1.get$_entrySize();
        t2 = $.getInterceptor$as(table);
      case 2:
        var currentOffset, entry;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = this._offset;
                t4 = t2.get$length(table);
              case 2:
                state0 = 0;
                if (!$.CONSTANT7.$lt(t3, t4))
                  break L0;
                currentOffset = this._offset;
                entry = t2.$index(table, currentOffset);
                this._offset = currentOffset + entrySize;
                if (!t1._isFree$1(entry)) {
                  this._liblib$_current = this._valueAt$2(currentOffset, entry);
                  return true;
                }
            }
        this._liblib$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._HashTableKeyIterable = {"": "_HashTableIterable;_hashTable",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._hashTable);
  },
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT4)
      return;
    return key;
  }
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT4)
      return;
    return key;
  }
};

$$._HashTableValueIterable = {"": "_HashTableIterable;_entryIndex,_hashTable",
  get$iterator: function(_) {
    return $._HashTableValueIterator$(this._hashTable, this._entryIndex);
  },
  _valueAt$2: function(offset, key) {
    var t1, t3;
    t1 = this._hashTable._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._valueAt$2$bailout1(1, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    return $.$$index$as(t1, offset + this._entryIndex);
  }
};

$$._HashTableValueIterator = {"": "_HashTableIterator;_entryIndex,_hashTable,_modificationCount,_offset,_liblib$_current",
  _valueAt$2: function(offset, key) {
    return $.$$index$as(this._hashTable.get$_table(), $.$$add$n(offset, this._entryIndex));
  }
};

$$.HashSet = {"": "Collection;_table>",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._table);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._table.get$_elementCount(), 0);
  },
  contains$1: function(_, object) {
    var t1 = this._table._get$1(object);
    if (typeof t1 !== "number")
      return this.contains$1$bailout1(1, t1);
    return t1 >= 0;
  },
  contains$1$bailout1: function(state0, t1) {
    return $.$$ge$n(t1, 0);
  },
  add$1: function(_, element) {
    var t1 = this._table;
    t1._put$1(element);
    t1._checkCapacity$0();
  },
  addAll$1: function(_, objects) {
    var t1, t2;
    for (t1 = $.get$iterator$a(objects), t2 = this._table; t1.moveNext$0() === true;) {
      t2._put$1(t1.get$current());
      t2._checkCapacity$0();
    }
  },
  remove$1: function(_, object) {
    var t1, offset;
    t1 = this._table;
    offset = t1._remove$1(object);
    t1._checkCapacity$0();
    return $.$$ge$n(offset, 0);
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  HashSet$0: function() {
    this._table._container = this;
  },
  $asCollection: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  }
};

$$._HashMapTable = {"": "_HashTable;_table,_capacity,_entryCount,_liblib$_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 2;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$$index$as(t1, $.$$add$n(offset, 1));
    }
  },
  _setValue$2: function(offset, value) {
    $.$$indexSet$a(this._table, $.$$add$n(offset, 1), value);
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof fromTable !== "string" && (typeof fromTable !== "object" || fromTable === null || fromTable.constructor !== Array && !fromTable.$isJavaScriptIndexingBehavior()))
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, fromTable, fromOffset, toOffset, t1);
    t3 = toOffset + 1;
    t4 = fromOffset + 1;
    if (t4 < 0 || t4 >= fromTable.length)
      throw $.ioore(t4);
    t4 = fromTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, fromTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$$indexSet$a(t1, $.$$add$n(toOffset, 1), $.$$index$as(fromTable, fromOffset + 1));
    }
  }
};

$$.HashMap = {"": "Object;_hashTable>",
  containsKey$1: function(key) {
    return $.$$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$a(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$$ge$n(offset, 0) === true)
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if ($.$$lt$n(offset, 0) === true)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, table, entrySize, offset, t2, entry;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    table = t1._table;
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.forEach$1$bailout(1, action, table, t1, modificationCount);
    entrySize = t1.get$_entrySize();
    for (offset = 0; t2 = table.length, offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  forEach$1$bailout: function(state0, action, table, t1, modificationCount) {
    var entrySize, t2, offset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$as(table), offset = 0; $.CONSTANT7.$lt(offset, t2.get$length(table)); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  get$keys: function() {
    return $._HashTableKeyIterable$(this._hashTable);
  },
  get$values: function() {
    return $._HashTableValueIterable$(this._hashTable, 1);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  HashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$$mul$n(capacity, this.get$_entrySize()));
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.CONSTANT8;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$$index$as(t1, $.$$add$n(offset, 1));
    }
  },
  _linkLast$1: function(offset) {
    var last, t1;
    last = $.$$index$as(this._table, 2);
    t1 = $.getInterceptor$n(offset);
    $.$$indexSet$a(this._table, t1.$add(offset, 1), 0);
    $.$$indexSet$a(this._table, t1.$add(offset, 2), last);
    $.$$indexSet$a(this._table, $.$$add$n(last, 1), offset);
    $.$$indexSet$a(this._table, 2, offset);
  },
  _unlink$1: function(offset) {
    var t1, next, prev;
    t1 = $.getInterceptor$n(offset);
    next = $.$$index$as(this._table, t1.$add(offset, 1));
    prev = $.$$index$as(this._table, t1.$add(offset, 2));
    $.$$indexSet$a(this._table, t1.$add(offset, 1), null);
    $.$$indexSet$a(this._table, t1.$add(offset, 2), null);
    $.$$indexSet$a(this._table, $.$$add$n(prev, 1), next);
    $.$$indexSet$a(this._table, $.$$add$n(next, 2), prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = $.getInterceptor$as(oldTable);
    if (1 >= oldTable.length)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, t1);
    for (; !$.$$eq$o(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      t1 = oldTable.length;
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$as(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._put$1$bailout1(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.CONSTANT3) {
      t1 = this._liblib$_deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(2, key, t1, offset);
      this._liblib$_deletedCount = t1 - 1;
    } else if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(3, key, t1, offset);
      this._entryCount = t1 + 1;
    } else
      return offset;
    this._recordModification$0();
    if (key == null)
      key = $.CONSTANT4;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$abnosu(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$$index$as(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry === $.CONSTANT3)
          switch (state0) {
            case 0:
              t1 = this._liblib$_deletedCount;
            case 2:
              state0 = 0;
              this._liblib$_deletedCount = $.$$sub$n(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry == null)
                switch (state0) {
                  case 0:
                    t1 = this._entryCount;
                  case 3:
                    state0 = 0;
                    this._entryCount = $.$$add$n(t1, 1);
                }
              else
                return offset;
          }
        this._recordModification$0();
        if (key == null)
          key = $.CONSTANT4;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$$indexSet$a(t1, offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    var key;
    this._unlink$1(offset);
    key = $.CONSTANT3.$eq($.CONSTANT3, null) ? $.CONSTANT4 : $.CONSTANT3;
    $.$$indexSet$a(this._table, offset, key);
    this._liblib$_deletedCount = $.$$add$n(this._liblib$_deletedCount, 1);
    this._recordModification$0();
  }
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table>",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  }
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable>,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib$_current",
  _getCurrent$1: function(offset) {
    return $.$$index$as(this._hashTable.get$_table(), $.$$add$n(offset, this._valueIndex));
  }
};

$$._LinkedHashTableIterator = {"": "Object;_hashTable>,_modificationCount>",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$$eq$o(t2, 0) === true) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_liblib$_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$$index$as(t1, $.$$add$n(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$$indexSet$a(this._table, $.$$add$n(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$$indexSet$a(t1, $.$$add$n(toOffset, 3), $.$$index$as(oldTable, $.$$add$n(fromOffset, 3)));
    }
  }
};

$$.LinkedHashMap = {"": "Object;_hashTable>",
  containsKey$1: function(key) {
    return $.$$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$a(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$$ge$n(offset, 0) === true)
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if (typeof offset !== "number")
      return this.remove$1$bailout(1, offset, t1);
    if (offset < 0)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  remove$1$bailout: function(state0, offset, t1) {
    var oldValue;
    if ($.$$lt$n(offset, 0) === true)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$$eq$o(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$$eq$o(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function() {
    return $._LinkedHashTableKeyIterable$(this._hashTable);
  },
  get$values: function() {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$.ListIterable = {"": "Iterable;",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.CONSTANT7.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null);
  },
  toList$1$growable: function(_, growable) {
    var t1, result, i;
    if (growable === true) {
      t1 = this.get$length(this);
      result = $.List_List($);
      $.CONSTANT2.set$length(result, t1);
    } else
      result = $.List_List(this.get$length(this));
    for (i = 0; $.CONSTANT7.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  }
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$as(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.CONSTANT5.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$as(this._iterable);
    t1 = this._start;
    if ($.$$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$as(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.CONSTANT5.$ge(t2, $length))
      return $length - t1;
    return $.CONSTANT5.$sub(t2, t1);
  },
  get$length$bailout2: function(state0, $length, t1) {
    switch (state0) {
      case 0:
        $length = $.get$length$as(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        var t2;
        state0 = 0;
        if ($.$$ge$n(t1, $length) === true)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || $.CONSTANT5.$ge(t2, $length))
          return $.$$sub$n($length, t1);
        return $.CONSTANT5.$sub(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$a(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$$add$n(t1, index);
      case 3:
        var t3;
        if (state0 === 3 || state0 === 0 && $.$$lt$n(index, 0) !== true)
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t3 = $.$$ge$n(realIndex, t1) === true;
              t1 = t3;
          }
        else
          t1 = true;
        if (t1)
          throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$a(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if ($.$$lt$n(count, 0) === true)
      throw $.$$throw($.ArgumentError$(count));
    return $.SubListIterable$(this._iterable, $.$$add$n(this._start, count), this._endOrLength);
  }
};

$$.ListIterator = {"": "Object;_iterable,_liblib0$_length,_index,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib0$_length;
    t2 = this._iterable;
    if ($.$$eq$o(t1, $.get$length$as(t2)) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib0$_current = null;
      return false;
    }
    this._liblib0$_current = $.elementAt$1$a(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  }
};

$$.MappedIterator = {"": "Iterator;_liblib0$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib0$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib0$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.MappedListIterable = {"": "ListIterable;_liblib0$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$as(this._liblib0$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$a(this._liblib0$_source, index));
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.WhereIterator$(t1.get$iterator(t1), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.SkipIterable = {"": "Iterable;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (!(typeof n === "number" && Math.floor(n) === n) || n < 0)
      throw $.$$throw($.ArgumentError$(n));
    return $.SkipIterable$(this._iterable, $.$$add$n(this._skipCount, n));
  },
  get$iterator: function(_) {
    return $.SkipIterator$($.get$iterator$a(this._iterable), this._skipCount);
  },
  SkipIterable$2: function(_iterable, _skipCount) {
    var t1 = this._skipCount;
    if (!(typeof t1 === "number" && Math.floor(t1) === t1) || $.$$lt$n(t1, 0) === true)
      throw $.$$throw($.ArgumentError$(t1));
  }
};

$$.SkipIterator = {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        return this.moveNext$0$bailout1(1, t1, i, t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  moveNext$0$bailout1: function(state0, t1, i, t2) {
    switch (state0) {
      case 0:
        t1 = this._iterator;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this._skipCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT7.$lt(i, t2))
                  break L0;
                t1.moveNext$0();
                ++i;
            }
        this._skipCount = 0;
        return t1.moveNext$0();
    }
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId,nextManagerId,currentContext>,rootContext,topEventLoop>,fromCommandLine,isWorker>,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true && $.get$isEmpty$as(this.isolates) === true && $.$$eq$o(this.topEventLoop.get$activeTimerCount(), 0) === true)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    return $.$$index$as(this.ports, portId);
  },
  register$2: function(portId, port) {
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    $.$$indexSet$a(this.ports, portId, port);
    $.$$indexSet$a($globalState.isolates, this.id, this);
  },
  unregister$1: function(portId) {
    $.remove$1$a(this.ports, portId);
    if ($.get$isEmpty$as(this.ports) === true)
      $.remove$1$a($globalState.isolates, this.id);
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$$add$n(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1.addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.get$id()) === true && $globalState.fromCommandLine === true && $.get$isEmpty$as($globalState.rootContext.get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_liblib6$_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_liblib6$_receivePort>,_liblib6$_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$$eq$o(this._liblib6$_receivePort, other._liblib6$_receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._liblib6$_receivePort.get$_liblib6$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_liblib6$_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$$eq$o(this._workerId, other._workerId) === true && $.$$eq$o(this._liblib6$_isolateId, other._liblib6$_isolateId) === true && $.$$eq$o(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$$shl$n(this._workerId, 16);
    t2 = $.$$shl$n(this._liblib6$_isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$.ReceivePortImpl = {"": "Object;_liblib6$_id>,_liblib6$_callback>",
  _liblib6$_callback$2: function(arg0, arg1) {
    return this._liblib6$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib6$_callback = onMessage;
  },
  close$0: function() {
    this._liblib6$_callback = null;
    $globalState.currentContext.unregister$1(this._liblib6$_id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.currentContext.get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._liblib6$_id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_liblib6$_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    if ($.$$index$as(this._liblib6$_visited, list) != null)
      return;
    $.$$indexSet$a(this._liblib6$_visited, list, true);
    $.forEach$1$a(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    if ($.$$index$as(this._liblib6$_visited, map) != null)
      return;
    $.$$indexSet$a(this._liblib6$_visited, map, true);
    $.forEach$1$a(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port.get$_liblib6$_port() == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._liblib6$_visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer0 = {"": "_Serializer;_liblib6$_nextFreeRefId,_liblib6$_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._liblib6$_isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._liblib6$_isolateId, port._liblib6$_receivePort.get$_liblib6$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_liblib6$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._liblib6$_visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_liblib6$_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._liblib6$_receivePort, port._liblib6$_isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._liblib6$_isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_liblib6$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._liblib6$_visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer0 = {"": "_Deserializer;_liblib6$_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$as(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$$eq$o(managerId, $globalState.currentManagerId) === true) {
      isolate = $.$$index$as($globalState.isolates, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$a(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List($);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$as(this.tagged), i = 0; i < $length; ++i)
      $.$$index$as(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap0 = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._liblib6$_visited.reset$0();
    result = null;
    try {
      result = this._liblib6$_dispatch$1(x);
    } finally {
      this._liblib6$_visited.cleanup$0();
    }
    return result;
  },
  _liblib6$_dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copy, len, i;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior())
      return this.visitList$1$bailout1(1, list);
    copy = $.$$index$as(this._liblib6$_visited, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len);
    $.$$indexSet$a(this._liblib6$_visited, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      copy[i] = this._liblib6$_dispatch$1(list[i]);
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var copy, t1, len, i, t2;
    copy = $.$$index$as(this._liblib6$_visited, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$as(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    $.$$indexSet$a(this._liblib6$_visited, list, copy);
    for (i = 0; $.CONSTANT7.$lt(i, len); ++i) {
      t2 = this._liblib6$_dispatch$1(t1.$index(list, i));
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t1.copy_0 = $.$$index$as(this._liblib6$_visited, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$();
    $.$$indexSet$a(this._liblib6$_visited, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copyId, id;
    copyId = $.$$index$as(this._liblib6$_visited, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._liblib6$_nextFreeRefId;
    this._liblib6$_nextFreeRefId = id + 1;
    $.$$indexSet$a(this._liblib6$_visited, list, id);
    return ["list", id, this._liblib6$_serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var copyId, id;
    copyId = $.$$index$as(this._liblib6$_visited, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._liblib6$_nextFreeRefId;
    this._liblib6$_nextFreeRefId = id + 1;
    $.$$indexSet$a(this._liblib6$_visited, map, id);
    return ["map", id, this._liblib6$_serializeList$1($.toList$0$a(map.get$keys())), this._liblib6$_serializeList$1($.toList$0$a(map.get$values()))];
  },
  _liblib6$_serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._liblib6$_serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._liblib6$_dispatch$1(list[i]);
    }
    return result;
  },
  _liblib6$_serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$as(list);
        len = t1.get$length(list);
      case 2:
        var result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.CONSTANT7.$lt(i, len); ++i) {
          t2 = this._liblib6$_dispatch$1(t1.$index(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._liblib6$_deserialized = $.HashMap$();
    return this._liblib6$_deserializeHelper$1(x);
  },
  _liblib6$_deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$$index$as(x, 0)) {
      case "ref":
        return this._liblib6$_deserializeRef$1(x);
      case "list":
        return this._liblib6$_deserializeList$1(x);
      case "map":
        return this._liblib6$_deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _liblib6$_deserializeRef$1: function(x) {
    var id = $.$$index$as(x, 1);
    return $.$$index$as(this._liblib6$_deserialized, id);
  },
  _liblib6$_deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$as(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._liblib6$_deserializeList$1$bailout(1, dartList, id);
    $.$$indexSet$a(this._liblib6$_deserialized, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._liblib6$_deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _liblib6$_deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    $.$$indexSet$a(this._liblib6$_deserialized, id, dartList);
    t2 = $.getInterceptor$as(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.CONSTANT7.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._liblib6$_deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _liblib6$_deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, i, key;
    result = $.HashMap$();
    t1 = $.getInterceptor$as(x);
    id = t1.$index(x, 1);
    $.$$indexSet$a(this._liblib6$_deserialized, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._liblib6$_deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._liblib6$_deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._liblib6$_deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._liblib6$_deserializeHelper$1(values[i]));
    }
    return result;
  },
  _liblib6$_deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, t3, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$();
        t1 = $.getInterceptor$as(x);
        id = t1.$index(x, 1);
        $.$$indexSet$a(this._liblib6$_deserialized, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$as(keys);
        len = t3.get$length(keys);
      case 3:
        var id, i;
        state0 = 0;
        for (t1 = $.getInterceptor$as(values), i = 0; $.CONSTANT7.$lt(i, len); ++i)
          result.$indexSet(result, this._liblib6$_deserializeHelper$1(t3.$index(keys, i)), this._liblib6$_deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop === true)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.set$activeTimerCount($.$$sub$n(t1.get$activeTimerCount(), 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$$eq$o(milliseconds, 0) === true)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add$n(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1("'");
    message = null;
    try {
      message = $.toString$0$abfnosu(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(message);
    buffer.write$1("'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1("Stack trace:\n");
      buffer.writeln$1($.toString$0$abfnosu(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_run(new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future>,_isComplete",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib1$_setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future>,_nextListener=",
  _sendValue$1: function(value) {
    this.future._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state=,_resultOrListeners>",
  get$_isComplete: function() {
    return $.$$eq$o(this._state, 0) !== true;
  },
  get$_hasValue: function() {
    return $.$$eq$o(this._state, 1);
  },
  get$_hasError: function() {
    return $.$$and$n(this._state, 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return $.$$and$n(this._state, 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  whenComplete$1: function(action) {
    var whenFuture = $._WhenFuture$(action);
    if (this.get$_isComplete() !== true)
      this._addListener$1(whenFuture);
    else if (this.get$_hasValue() === true)
      $.Timer_run(new $._FutureImpl_whenComplete_anon(whenFuture, this._resultOrListeners));
    else {
      this._state = $.$$and$n(this._state, 4294967291);
      $.Timer_run(new $._FutureImpl_whenComplete_anon0(whenFuture, this._resultOrListeners));
    }
    return whenFuture;
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = $.$$and$n(this._state, 4294967291);
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib1$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib1$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib1$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = $.$$or$n(this._state, 4);
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._liblib1$_setValue$1(this._resultOrListeners);
    else {
      this._state = $.$$and$n(this._state, 4294967291);
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib1$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib1$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  _FutureImpl$immediateError$2: function(error, stackTrace) {
    this._setError$1(typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace));
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._WhenFuture = {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, e0, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!t1.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_anon(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, e0, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!t2.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_anon(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      if (typeof t2 === "object" && t2 !== null && !!t2.$isAsyncError) {
        e = t2;
        t1.error_0 = e;
      } else {
        e0 = t2;
        s = $.getTraceFromException(exception);
        t1.error_0 = $.AsyncError$withCause(e0, s, t1.error_0);
      }
    }

    this._setError$1(t1.error_0);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  whenComplete$1: function(action) {
    return this._future.whenComplete$1(action);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  map$1: function(_, convert) {
    return $._MapStream$(this, convert);
  },
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function(_) {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$();
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count);
  },
  get$first: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_first_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_first_anon0(future), t3, true);
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, future, t3;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (!(typeof t2 === "number" && Math.floor(t2) === t2) || $.$$lt$n(t2, 0) === true)
      throw $.$$throw($.ArgumentError$(t1.index_0));
    future = $._FutureImpl$();
    t1.subscription_1 = null;
    t2 = new $.Stream_elementAt_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_1 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_elementAt_anon0(future), t3, true);
    return future;
  }
};

$$.StreamSubscription = {"": "Object;"};

$$._ForwardingStream = {"": "Stream;",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return this._createSubscription$4(onData, onError, onDone, true === unsubscribeOnError);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, unsubscribeOnError);
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  }
};

$$._BaseStreamSubscription = {"": "Object;",
  _liblib1$_onData$1: function(arg0) {
    return this._liblib1$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onError$1: function(handleError) {
    this._onError = handleError == null ? $._nullErrorHandler : handleError;
  },
  get$onError: function() {
    return new $.BoundClosure$1(this, "onError$1");
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone) {
    if (this._liblib1$_onData == null)
      this._liblib1$_onData = $._nullDataHandler;
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_unsubscribeOnError,_subscription,_liblib1$_onData,_onError,_onDone",
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      throw $.$$throw($.StateError$("Subscription has been unsubscribed"));
    t1.cancel$0();
    this._subscription = null;
  },
  _sendData$1: function(data) {
    this._liblib1$_onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _unsubscribeOnError) {
    var t1, t2, t3;
    t1 = this._stream._source;
    t2 = this.get$_handleData();
    t3 = this.get$_handleError();
    this._subscription = t1.listen$3$onDone$onError(t2, this.get$_handleDone(), t3);
  }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    sink._sendData$1(outputEvent);
  }
};

$$._SkipStream = {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    if ($.$$gt$n(this._remaining, 0) === true) {
      this._remaining = $.$$sub$n(this._remaining, 1);
      return;
    }
    return sink._sendData$1(inputEvent);
  },
  _SkipStream$2: function(source, count) {
    if (!(typeof count === "number" && Math.floor(count) === count) || count < 0)
      throw $.$$throw($.ArgumentError$(count));
  }
};

$$._ChildrenElementList = {"": "Object;_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t3, i, t2;
    t1 = this._childElements;
    if (growable === true) {
      output = [];
      $.CONSTANT2.set$length(output, $.get$length$as(t1));
    } else
      output = $.List_List($.get$length$as(t1));
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toList$1$growable$bailout(1, t1, output);
    len = t1.length;
    t3 = output.length;
    i = 0;
    for (; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$1$growable$bailout: function(state0, t1, output, t3, len) {
    switch (state0) {
      case 0:
        t1 = this._childElements;
        if (growable === true) {
          output = [];
          $.CONSTANT2.set$length(output, $.get$length$as(t1));
        } else
          output = $.List_List($.get$length$as(t1));
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$as(t1);
        len = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT7.$lt(i, len); ++i) {
          t2 = t3.$index(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$a(this._childElements); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return $.$$index$as(this._childElements, index);
  },
  get$length: function(_) {
    return $.get$length$as(this._childElements);
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.$$indexSet$bailout(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  $$indexSet$bailout: function(state0, index, value, t1, t2) {
    t1.replaceChild(value, $.$$index$as(t2, index));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.CONSTANT2.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true);
    for (t1 = $.get$iterator$a(iterable), t2 = this._element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    var t1, t2;
    if (typeof object === "object" && object !== null && object.$isElement()) {
      t1 = object.parentNode;
      t2 = this._element;
      if (t1 === t2)
        t2.removeChild(object);
    }
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return $.$$index$as(this._nodeList, index);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$as(this._nodeList);
  },
  get$length: function(_) {
    return $.get$length$as(this._nodeList);
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function(_) {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$as(this._nodeList, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(_, element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementListIterator = {"": "Object;_list,_liblib3$_index,_current",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib3$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextIndex = t1 + 1;
    t1 = this._list;
    t2 = t1.get$length(t1);
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, nextIndex);
    if (nextIndex < t2) {
      this._current = t1.$index(t1, nextIndex);
      this._liblib3$_index = nextIndex;
      return true;
    }
    this._liblib3$_index = t1.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, nextIndex) {
    switch (state0) {
      case 0:
        t1 = this._liblib3$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$$add$n(t1, 1);
        t1 = this._list;
        t2 = t1.get$length(t1);
      case 2:
        state0 = 0;
        if ($.$$lt$n(nextIndex, t2) === true) {
          this._current = t1.$index(t1, nextIndex);
          this._liblib3$_index = nextIndex;
          return true;
        }
        this._liblib3$_index = t1.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.Events = {"": "Object;_ptr",
  $index: function(_, type) {
    return $._EventStream$(this._ptr, type, false);
  }
};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result.$eq(result, null))
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (!t1.$eq(t1, t2)) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout(1, iterable, t2, len);
        i = 0;
        for (; i < len; ++i)
          t2.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$a(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout: function(state0, iterable, t2, len) {
    switch (state0) {
      case 0:
      case 1:
        var t1, i;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = iterable._this;
              t2 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && !t1.$eq(t1, t2))
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.CONSTANT7.$lt(i, len); ++i)
                      t2.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$a(iterable), t2 = this._this; t1.moveNext$0() === true;)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (!(typeof object === "object" && object !== null && object.$isNode()))
      return;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return;
    t1.removeChild(object);
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout(1, t2, value, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  $$indexSet$bailout: function(state0, t2, value, index, t1) {
    t1.replaceChild(value, $.$$index$as(t2, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$a(this._this.childNodes);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return $.$$index$as(this._this.childNodes, index);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  get$length: function(_) {
    return $.get$length$as(this._this.childNodes);
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index$as(t1, index);
  },
  $is_ChildNodeListLazy: true,
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._AttributeMap = {"": "Object;",
  forEach$1: function(_, f) {
    var t1, t2;
    for (t1 = $.CONSTANT2.get$iterator(this.get$keys()); t1.moveNext$0();) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(this, t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._element.attributes;
    keys = $.List_List($);
    for (len = attributes.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(attributes.$index(attributes, i)) === true)
        keys.push(attributes.$index(attributes, i).get$$$dom_localName());
    return keys;
  },
  get$values: function() {
    var attributes, values, len, i;
    attributes = this._element.attributes;
    values = $.List_List($);
    for (len = attributes.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(attributes.$index(attributes, i)) === true)
        values.push(attributes.$index(attributes, i).get$value());
    return values;
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function () { return [$.String, $.String]; };
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_element",
  containsKey$1: function(key) {
    return this._element.hasAttribute(key);
  },
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, $.S(value));
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._onData;
    if (t1 != null)
      this._target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  onError$1: function(handleError) {
  },
  get$onError: function() {
    return new $.BoundClosure$1(this, "onError$1");
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (this._onData != null && this.get$_paused() !== true)
      this._target.$$dom_addEventListener$3(this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._JsSerializer = {"": "_Serializer0;_nextFreeRefId,_visited",
  visitSendPortSync$1: function(x) {
    if (!!x.$is_JsSendPortSync)
      return ["sendport", "nativejs", x._id];
    if (!!x.$is_LocalSendPortSync)
      return this.visitLocalSendPortSync$1(x);
    if (!!x.$is_RemoteSendPortSync)
      return ["sendport", "dart", x._isolateId, x._portId];
    throw $.$$throw("Unknown port type " + $.S(x));
  },
  visitLocalSendPortSync$1: function(x) {
    return ["sendport", "dart", $.ReceivePortSync__isolateId(), x._receivePort._portId];
  },
  visitSendPort$1: function(x) {
    throw $.$$throw($.UnimplementedError$("Asynchronous send port not yet implemented."));
  }
};

$$._JsDeserializer = {"": "_Deserializer0;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, tag;
    t1 = $.getInterceptor$as(x);
    tag = t1.$index(x, 1);
    switch (tag) {
      case "nativejs":
        return $._JsSendPortSync$(t1.$index(x, 2));
      case "dart":
        return $.ReceivePortSync__lookup(t1.$index(x, 2), t1.$index(x, 3));
      default:
        throw $.$$throw("Illegal SendPortSync type: " + $.S(tag));
    }
  }
};

$$._JsSendPortSync = {"": "Object;_id",
  callSync$1: function(message) {
    var serialized, result;
    serialized = $._JsSerializer$().traverse$1(message);
    result = ReceivePortSync.dispatchCall(this._id, serialized);
    return $._JsDeserializer$().deserialize$1(result);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_JsSendPortSync && $.$$eq$o(this._id, other._id) === true;
  },
  get$hashCode: function(_) {
    return this._id;
  },
  $is_JsSendPortSync: true,
  $isSendPortSync: true
};

$$._RemoteSendPortSync = {"": "Object;_isolateId,_portId>",
  callSync$1: function(message) {
    var serialized, result;
    serialized = $._JsSerializer$().traverse$1(message);
    result = $._RemoteSendPortSync__call(this._isolateId, this._portId, serialized);
    return $._JsDeserializer$().deserialize$1(result);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_RemoteSendPortSync)
      t1 = $.$$eq$o(this._isolateId, other._isolateId) === true && $.$$eq$o(this._portId, other._portId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = this._isolateId;
    t2 = this._portId;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return $.$$shr$n(t1, 16 + t2);
  },
  $is_RemoteSendPortSync: true,
  $isSendPortSync: true
};

$$._LocalSendPortSync = {"": "Object;_receivePort",
  callSync$1: function(message) {
    var t1, copy, result;
    t1 = $._JsSerializer$().traverse$1(message);
    copy = $._JsDeserializer$().deserialize$1(t1);
    result = this._receivePort._callback$1(copy);
    t1 = $._JsSerializer$().traverse$1(result);
    return $._JsDeserializer$().deserialize$1(t1);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_LocalSendPortSync) {
      t1 = this._receivePort;
      t1 = t1.$eq(t1, other._receivePort);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1 = this._receivePort;
    return t1.get$hashCode(t1);
  },
  $is_LocalSendPortSync: true,
  $isSendPortSync: true
};

$$.ReceivePortSync = {"": "Object;_portId>,_callback,_portSubscription",
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  get$_listenerName: function() {
    return $.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId);
  },
  receive$1: function(callback) {
    var t1;
    this._callback = callback;
    if (this._portSubscription == null) {
      t1 = window.get$on();
      this._portSubscription = t1.$index(t1, this.get$_listenerName()).listen$1(new $.ReceivePortSync_receive_anon(this));
    }
  },
  close$0: function() {
    $.remove$1$a($.ReceivePortSync__portMap, this._portId);
    var t1 = this._portSubscription;
    if (t1 != null)
      t1.cancel$0();
  },
  toSendPort$0: function() {
    return $._LocalSendPortSync$_internal(this);
  },
  ReceivePortSync$0: function() {
    if ($.ReceivePortSync__portIdCount == null) {
      $.ReceivePortSync__portIdCount = 0;
      $.ReceivePortSync__portMap = $.Map_Map();
    }
    var t1 = $.ReceivePortSync__portIdCount;
    $.ReceivePortSync__portIdCount = $.$$add$n(t1, 1);
    this._portId = t1;
    $.$$indexSet$a($.ReceivePortSync__portMap, this._portId, this);
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser0 = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      t1.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Serializer0 = {"": "_MessageTraverser0;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$a(map.get$keys())), this._serializeList$1($.toList$0$a(map.get$values()))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$as(list);
        len = t1.get$length(list);
      case 2:
        var result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.CONSTANT7.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer0 = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$$index$as(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id = $.$$index$as(x, 1);
    return $.$$index$as(this._deserialized, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$as(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    $.$$indexSet$a(this._deserialized, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    $.$$indexSet$a(this._deserialized, id, dartList);
    t2 = $.getInterceptor$as(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.CONSTANT7.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, i, key;
    result = $.HashMap$();
    t1 = $.getInterceptor$as(x);
    id = t1.$index(x, 1);
    $.$$indexSet$a(this._deserialized, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, t3, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$();
        t1 = $.getInterceptor$as(x);
        id = t1.$index(x, 1);
        $.$$indexSet$a(this._deserialized, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$as(keys);
        len = t3.get$length(keys);
      case 3:
        var id, i;
        state0 = 0;
        for (t1 = $.getInterceptor$as(values), i = 0; $.CONSTANT7.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  close$0: function() {
    return this._window.close();
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, t1, nextPosition);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$$add$n(t1, 1);
        t1 = this._length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$lt$n(nextPosition, t1) === true)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._current = $.$$index$as(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true);
  },
  forEach$1: function(_, f) {
    $.CONSTANT2.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index].replaceWith$1(value);
  },
  add$1: function(_, value) {
    var t1 = this._childNodes;
    t1.add$1(t1, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$a(iterable), t2 = this._childNodes; t1.moveNext$0() === true;)
      t2.add$1(t2, t1.get$current());
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  clear$0: function(_) {
    var t1 = this._childNodes;
    t1.clear$0(t1);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$a(result);
    return result;
  },
  map$1: function(_, f) {
    return $.CONSTANT2.map$1(this.get$_filtered(), f);
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (!(typeof element === "object" && element !== null && element.$isElement()))
      return;
    for (i = 0; $.CONSTANT7.$lt(i, this.get$length(this)); ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$a(indexElement);
        return;
      }
    }
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function(_) {
    return $.CONSTANT2.get$isEmpty(this.get$_filtered());
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.CONSTANT2.get$iterator(this.get$_filtered());
  },
  indexOf$2: function(_, element, start) {
    return $.CONSTANT2.indexOf$2(this.get$_filtered(), element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  get$last: function(_) {
    return $.CONSTANT2.get$last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$.JsonUnsupportedObjectError = {"": "Object;unsupportedObject,cause>",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
};

$$._JsonStringifier = {"": "Object;sb>,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.$$throw("Cyclic structure");
    }
    t1.push(object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson))
          throw $.$$throw($.JsonUnsupportedObjectError$(object));
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t1.add$1(t1, $.CONSTANT7.toString$0(object));
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1.add$1(t1, "true");
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1.add$1(t1, "false");
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1.add$1(t1, "null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1.add$1(t1, "\"");
      $._JsonStringifier_escape(t1, object);
      t1.add$1(t1, "\"");
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || object.$isList())) {
      if (typeof object !== "object" || object === null || object.constructor !== Array && !object.$isJavaScriptIndexingBehavior())
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t2 = this.sb;
      t2.add$1(t2, "[");
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t2.add$1(t2, ",");
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t2.add$1(t2, "]");
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && object.$isMap()) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t2.add$1(t2, "{");
      t1.first_0 = true;
      object.forEach$1(object, new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
      t2.add$1(t2, "}");
      t2 = this.seen;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t1.add$1(t1, $.CONSTANT7.toString$0(object));
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1.add$1(t1, "true");
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1.add$1(t1, "false");
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1.add$1(t1, "null");
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1.add$1(t1, "\"");
                                  $._JsonStringifier_escape(t1, object);
                                  t1.add$1(t1, "\"");
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || object.$isList()))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t2 = this.sb;
                                            t2.add$1(t2, "[");
                                            t1 = $.getInterceptor$as(object);
                                            if ($.$$gt$n(t1.get$length(object), 0) === true) {
                                              this.stringifyValue$1(t1.$index(object, 0));
                                              for (i = 1; $.CONSTANT7.$lt(i, t1.get$length(object)); ++i) {
                                                t2.add$1(t2, ",");
                                                this.stringifyValue$1(t1.$index(object, i));
                                              }
                                            }
                                            t2.add$1(t2, "]");
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && object.$isMap()) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t2.add$1(t2, "{");
                                        t1.first_0 = true;
                                        object.forEach$1(object, new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                        t2.add$1(t2, "}");
                                        t2 = this.seen;
                                        if (0 >= t2.length)
                                          throw $.ioore(0);
                                        t2.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$.ProxyInvocationMirror = {"": "InvocationMirror;memberName>,positionalArguments>,namedArguments>,isMethod>,isGetter>,isSetter>",
  ProxyInvocationMirror$6: function(memberName, positionalArguments, namedArguments, isMethod, isGetter, isSetter) {
    this.positionalArguments = positionalArguments != null ? $.toList$0$a($.map$1$a(positionalArguments, $._serialize0)) : null;
  }
};

$$.JsProxy = {"": "Object;_proxy>",
  noSuchMethod$1: function(_, invocation) {
    var proxyInvocation, jsResult;
    proxyInvocation = $.ProxyInvocationMirror$fromInvocationMirror(invocation);
    jsResult = $.noSuchMethod$1$o(this._proxy, proxyInvocation);
    return jsResult == null ? $.get$NONE() : $.Some$_(jsResult);
  }
};

$$.IsJsProxy = {"": "Object;_jsProxy>",
  get$$$: function() {
    return this._jsProxy;
  },
  $isIsJsProxy: true
};

$$.IsEnum = {"": "Object;value>", $isIsEnum: true};

$$.Callback0 = {"": "Callback;_manualDispose,_liblib2$_id,_liblib2$_callback"};

$$.Callback = {"": "Object;",
  get$_serialized: function() {
    return ["funcref", this._liblib2$_id, $.get$_proxiedObjectTable().get$sendPort()];
  },
  _initialize$1: function(manualDispose) {
    this._manualDispose = manualDispose;
    this._liblib2$_id = $.add$1$a($.get$_proxiedObjectTable(), this._liblib2$_callback);
    $.get$_proxiedObjectTable().globalize$1(this._liblib2$_id);
  },
  dispose$0: function() {
    $.get$_proxiedObjectTable().invalidate$1(this._liblib2$_id);
  },
  Callback$many$1: function(f) {
    this._liblib2$_callback = new $.anon0(f);
    this._initialize$1(true);
  },
  $isCallback: true
};

$$.Proxy = {"": "Object;_port,_liblib2$_id",
  toJs$0: function() {
    return this;
  },
  $index: function(_, arg) {
    return $.Proxy__forward(this, "[]", "method", [arg]);
  },
  $indexSet: function(_, key, value) {
    return $.Proxy__forward(this, "[]=", "method", [key, value]);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      t1 = true;
    else
      t1 = typeof other === "object" && other !== null && !!other.$isProxy && $._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]) === true;
    return t1;
  },
  noSuchMethod$1: function(_, invocation) {
    var member, t1, args, kind;
    member = invocation.get$memberName();
    t1 = $.getInterceptor$as(member);
    if ($.$$eq$o(t1.indexOf$1(member, "@"), -1) !== true)
      member = t1.substring$2(member, 0, t1.indexOf$1(member, "@"));
    args = invocation.get$positionalArguments();
    if (args == null)
      args = [];
    if (invocation.get$isGetter() === true) {
      t1 = $.getInterceptor$s(member);
      if (t1.startsWith$1(member, "get:"))
        member = t1.substring$1(member, 4);
      kind = "get";
    } else if (invocation.get$isSetter() === true) {
      t1 = $.getInterceptor$s(member);
      if (t1.endsWith$1(member, "=") === true)
        member = t1.substring$2(member, 0, $.$$sub$n(t1.get$length(member), 1));
      t1 = $.getInterceptor$s(member);
      if (t1.startsWith$1(member, "set:"))
        member = t1.substring$1(member, 4);
      kind = "set";
    } else {
      t1 = $.getInterceptor$s(member);
      if (t1.startsWith$1(member, "get:")) {
        member = t1.substring$1(member, 4);
        kind = "get";
      } else if (t1.startsWith$1(member, "set:")) {
        member = t1.substring$1(member, 4);
        kind = "set";
      } else
        kind = "method";
    }
    return $.Proxy__forward(this, member, kind, args);
  },
  $isProxy: true,
  $isSerializable: true,
  $asSerializable: function () { return [$.Proxy]; }
};

$$.FunctionProxy = {"": "Proxy;_port,_liblib2$_id",
  noSuchMethod$1: function(_, invocation) {
    var t1, t2, result;
    if (invocation.get$isMethod() === true && $.$$eq$o(invocation.get$memberName(), "call") === true) {
      t1 = this._liblib2$_id;
      t2 = $.toList$0$a($.map$1$a(invocation.get$positionalArguments(), $._serialize));
      result = this._port.callSync$1([t1, "", "apply", t2]);
      t1 = $.getInterceptor$as(result);
      if ($.$$eq$o(t1.$index(result, 0), "throws") === true)
        throw $.$$throw(t1.$index(result, 1));
      return $._deserialize(t1.$index(result, 1));
    } else
      return $.Proxy.prototype.noSuchMethod$1.call(this, this, invocation);
  }
};

$$._ProxiedObjectTable = {"": "Object;_name,_nextId,_deletedCount,_registry>,_port,_globalIds,_handleStack,_scopeIndices>",
  enterScope$0: function() {
    $.CONSTANT2.add$1(this._scopeIndices, this._handleStack.length);
  },
  exitScope$0: function() {
    var start, t1, t2, t3, i, t4;
    start = $.CONSTANT2.removeLast$0(this._scopeIndices);
    if (start !== (start | 0))
      return this.exitScope$0$bailout(1, start);
    for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, i = start; t4 = t2.length, i < t4; ++i) {
      if (i < 0)
        throw $.ioore(i);
      if (t3.contains$1(t3, t2[i]) !== true) {
        if (i >= t2.length)
          throw $.ioore(i);
        t1.remove$1(t1, t2[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    $.CONSTANT2.removeRange$2(t2, start, t4 - start);
  },
  exitScope$0$bailout: function(state0, start) {
    var t1, t2, t3, i, t4, t5;
    for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, i = start; t4 = $.$$lt$n(i, t2.length), t5 = t2.length, t4 === true; ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t5)
        throw $.ioore(i);
      if (t3.contains$1(t3, t2[i]) !== true) {
        if (i >= t2.length)
          throw $.ioore(i);
        t1.remove$1(t1, t2[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    if (typeof start !== "number")
      throw $.iae(start);
    $.CONSTANT2.removeRange$2(t2, start, t5 - start);
  },
  globalize$1: function(id) {
    var t1 = this._globalIds;
    return t1.add$1(t1, id);
  },
  invalidate$1: function(id) {
    var t1, old, t2;
    t1 = this._registry;
    old = t1.$index(t1, id);
    t2 = this._globalIds;
    t2.remove$1(t2, id);
    t1.remove$1(t1, id);
    this._deletedCount = this._deletedCount + 1;
    return old;
  },
  add$1: function(_, x) {
    var t1, t2, id, t3;
    if (this._scopeIndices.length === 0)
      throw $.$$throw("Must be inside scope to allocate.");
    t1 = this._name + "-";
    t2 = this._nextId;
    this._nextId = t2 + 1;
    id = t1 + $.S(t2);
    t3 = this._registry;
    t3.$indexSet(t3, id, x);
    $.CONSTANT2.add$1(this._handleStack, id);
    return id;
  },
  get$1: function(id) {
    var t1 = this._registry;
    return t1.$index(t1, id);
  },
  get$sendPort: function() {
    return this._port.toSendPort$0();
  },
  _ProxiedObjectTable$0: function() {
    this._port.receive$1(new $.anon(this));
  }
};

$$.Option = {"": "Object;"};

$$.None = {"": "Option;",
  map$1: function(_, transform) {
    return $.get$NONE();
  },
  get$value: function() {
    return;
  }
};

$$.Some = {"": "Option;_liblib4$_value",
  map$1: function(_, transform) {
    var t1 = transform.call$1(this._liblib4$_value);
    return t1 == null ? $.get$NONE() : $.Some$_(t1);
  },
  get$value: function() {
    return this._liblib4$_value;
  }
};

$$.EventListenerAdder = {"": "Object;",
  add$1: function(_, handler) {
    $.GEvent_GEvent().addListener$3(this._instance, this._eventName, handler);
  }
};

$$.MouseEventListenerAdder = {"": "EventListenerAdder;_instance,_eventName",
  add$1: function(_, handler) {
    $.EventListenerAdder.prototype.add$1.call(this, this, new $.MouseEventListenerAdder_add_anon(handler));
  }
};

$$.GMap = {"": "MVCObject;_jsProxy",
  set$center: function(latLng) {
    return this.get$$$().setCenter$1(latLng);
  },
  set$mapTypeId: function(mapTypeId) {
    if (typeof mapTypeId === "string" || typeof mapTypeId === "object" && mapTypeId !== null && !!mapTypeId.$isMapTypeId)
      this.get$$$().setMapTypeId$1(mapTypeId);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type String or MapTypeId"));
  },
  set$zoom: function(zoom) {
    return this.get$$$().setZoom$1(zoom);
  },
  $isGMap: true
};

$$.MapOptions = {"": "IsJsProxy;_jsProxy",
  set$center: function(center) {
    this.get$$$().set$center(center);
    return center;
  },
  set$draggable: function(draggable) {
    this.get$$$().set$draggable(draggable);
    return draggable;
  },
  set$mapTypeId: function(mapTypeId) {
    if (typeof mapTypeId === "string" || typeof mapTypeId === "object" && mapTypeId !== null && !!mapTypeId.$isMapTypeId)
      this.get$$$().set$mapTypeId(mapTypeId);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type String or MapTypeId"));
  },
  set$zoom: function(zoom) {
    this.get$$$().set$zoom(zoom);
    return zoom;
  }
};

$$.MapTypeId = {"": "IsEnum;value",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.value;
    return $.$$eq$o(t1, typeof other === "object" && other !== null && !!other.$isMapTypeId ? other.value : other);
  },
  $isMapTypeId: true,
  $asIsEnum: function () { return [$.String]; }
};

$$.Marker = {"": "MVCObject;_jsProxy",
  get$map: function(_) {
    var result = this.get$$$().getMap$0().get$value();
    if (result == null)
      return result;
    else if ($.GMap_isInstance(result) === true)
      return $.GMap$fromJsProxy(result);
    else if ($.StreetViewPanorama_isInstance(result) === true)
      return $.StreetViewPanorama$fromJsProxy(result);
    else
      throw $.$$throw($.Exception_Exception("Unsupported result"));
  },
  map$1: function($receiver, arg0) {
    return this.get$map($receiver).call$1(arg0);
  },
  set$animation: function(animation) {
    return this.get$$$().setAnimation$1(animation);
  },
  set$draggable: function(draggable) {
    return this.get$$$().setDraggable$1(draggable);
  },
  set$icon: function(icon) {
    if (icon == null || typeof icon === "string" || typeof icon === "object" && icon !== null && !!icon.$isIcon || typeof icon === "object" && icon !== null && !!icon.$isSymbol)
      this.get$$$().setIcon$1(icon);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type String, Icon or Symbol"));
  },
  set$map: function(_, map) {
    if (map == null || typeof map === "object" && map !== null && !!map.$isGMap || typeof map === "object" && map !== null && !!map.$isStreetViewPanorama)
      this.get$$$().setMap$1(map);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type GMap or StreetViewPanorama"));
  },
  set$position: function(latlng) {
    return this.get$$$().setPosition$1(latlng);
  },
  get$on: function() {
    return $.MarkerEvents$_(this);
  }
};

$$.MarkerEvents = {"": "Object;_marker",
  get$mouseover: function() {
    return $.MouseEventListenerAdder$(this._marker, "mouseover");
  }
};

$$.MarkerOptions = {"": "IsJsProxy;_jsProxy",
  set$animation: function(animation) {
    this.get$$$().set$animation(animation);
    return animation;
  },
  set$draggable: function(draggable) {
    this.get$$$().set$draggable(draggable);
    return draggable;
  },
  set$icon: function(icon) {
    if (icon == null || typeof icon === "string" || typeof icon === "object" && icon !== null && !!icon.$isIcon || typeof icon === "object" && icon !== null && !!icon.$isSymbol)
      this.get$$$().set$icon(icon);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type String, Icon or Symbol"));
  },
  set$map: function(_, map) {
    if (typeof map === "object" && map !== null && !!map.$isGMap || typeof map === "object" && map !== null && !!map.$isStreetViewPanorama)
      $.set$map$a(this.get$$$(), map);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type GMap or StreetViewPanorama"));
  },
  set$position: function(position) {
    this.get$$$().set$position(position);
    return position;
  },
  set$shape: function(shape) {
    this.get$$$().set$shape(shape);
    return shape;
  }
};

$$.Icon = {"": "IsJsProxy;_jsProxy",
  set$url: function(url) {
    this.get$$$().set$url(url);
    return url;
  },
  $isIcon: true
};

$$.MarkerShape = {"": "IsJsProxy;_jsProxy",
  set$coords: function(coords) {
    this.get$$$().set$coords(coords);
    return coords;
  },
  set$type: function(type) {
    var t1 = type.get$value();
    this.get$$$().set$type(t1);
    return t1;
  }
};

$$.MarkerShapeType = {"": "IsEnum;value",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.value;
    return $.$$eq$o(t1, typeof other === "object" && other !== null && !!other.$isMarkerShapeType ? other.value : other);
  },
  $isMarkerShapeType: true,
  $asIsEnum: function () { return [$.String]; }
};

$$.Animation = {"": "IsEnum;value",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.value;
    return $.$$eq$o(t1, typeof other === "object" && other !== null && !!other.$isAnimation ? other.value : other);
  },
  $isAnimation: true,
  $asIsEnum: function () { return [$.$int]; }
};

$$.InfoWindow = {"": "MVCObject;_jsProxy",
  close$0: function() {
    this.get$$$().close$0();
  },
  open$2: function(map, anchor) {
    if (typeof map === "object" && map !== null && !!map.$isGMap || typeof map === "object" && map !== null && !!map.$isStreetViewPanorama)
      this.get$$$().open$2(map, anchor);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type GMap or StreetViewPanorama"));
  },
  set$content: function($content) {
    if (typeof $content === "string" || typeof $content === "object" && $content !== null && $content.$isNode())
      this.get$$$().setContent$1($content);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type String or Node"));
  },
  set$position: function(position) {
    return this.get$$$().setPosition$1(position);
  }
};

$$.InfoWindowOptions = {"": "IsJsProxy;_jsProxy",
  set$content: function($content) {
    if (typeof $content === "string" || typeof $content === "object" && $content !== null && $content.$isNode())
      this.get$$$().set$content($content);
    else
      throw $.$$throw($.UnsupportedError$("Parameter must be of type String or Node"));
  },
  set$position: function(position) {
    this.get$$$().set$position(position);
    return position;
  }
};

$$.StreetViewPanorama = {"": "MVCObject;_jsProxy",
  set$position: function(latLng) {
    return this.get$$$().setPosition$1(latLng);
  },
  set$zoom: function(zoom) {
    return this.get$$$().setZoom$1(zoom);
  },
  $isStreetViewPanorama: true
};

$$.MapsEventListener = {"": "IsJsProxy;onRelease,_jsProxy"};

$$.GEvent = {"": "Object;",
  addListener$3: function(instance, eventName, handler) {
    var callback, instanciator;
    callback = $.Callback$many(handler);
    instanciator = new $.GEvent_addListener_anon(callback);
    return $.map$1$a($.IsJsProxy$fromJsProxy($.get$maps().get$event()).get$$$().addListener$3(instance, eventName, callback), instanciator).get$value();
  }
};

$$.MouseEvent = {"": "IsJsProxy;_jsProxy"};

$$.LatLng = {"": "IsJsProxy;_jsProxy",
  toString$0: function(_) {
    return $.noSuchMethod$1$o(this.get$$$(), $.ProxyInvocationMirror$method("toString", [])).get$value();
  }
};

$$.MVCObject = {"": "IsJsProxy;",
  get$1: function(key) {
    return this.get$$$().get$1(key).get$value();
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  }
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    return $.add$1$a(this.values_0, v);
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return $.add$1$a(this.keys_0, k);
  }
};

$$.anon0 = {"": "Closure;f_0",
  call$1: function(args) {
    return $.Function_apply(this.f_0, args, null);
  }
};

$$.HttpRequest_getString_anon = {"": "Closure;",
  call$1: function(xhr) {
    return xhr.get$responseText();
  }
};

$$.MouseEventListenerAdder_add_anon = {"": "Closure;handler_0",
  call$1: function(e) {
    return this.handler_0.call$1($.map$1$a(e, new $.MouseEventListenerAdder_add__anon()).get$value());
  }
};

$$.MouseEventListenerAdder_add__anon = {"": "Closure;",
  call$1: function(e) {
    return $.MouseEvent$fromJsProxy(e);
  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  }
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error()));
    t1 = t1.get$stackTrace();
    if (t1 != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
  }
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$0: function() {
    this.reportError_2.call$0();
    throw $.$$throw(this.this_1.get$error());
  }
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$$add$n(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib1$_setValue$1(this.box_0.count_0);
  }
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add$1$a(this.result_0, data);
  }
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._liblib1$_setValue$1(this.result_1);
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  }
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._liblib1$_setValue$1(false);
  }
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._liblib1$_setValue$1(true);
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._liblib6$_dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._liblib6$_dispatch$1(e);
  }
};

$$.main_anon = {"": "Closure;",
  call$1: function(e) {
    $.ajaxSendJSON();
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$.Stream_first_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    this.future_1._liblib1$_setValue$1(value);
    this.box_0.subscription_0.cancel$0();
    return;
  }
};

$$.Stream_first_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.AsyncError$($.StateError$("No elements"), null));
  }
};

$$._completeRequest_anon = {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    this.completer_1.complete$1(this.request_0.get$result());
  }
};

$$._completeRequest_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  }
};

$$._WhenFuture__sendValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._liblib1$_setValue$1(this.value_1);
  }
};

$$.GEvent_addListener_anon = {"": "Closure;callback_0",
  call$1: function(jsProxy) {
    return $.MapsEventListener$fromJsProxy(jsProxy, new $.GEvent_addListener__anon(this.callback_0));
  }
};

$$.GEvent_addListener__anon = {"": "Closure;callback_1",
  call$0: function() {
    return this.callback_1.dispose$0();
  }
};

$$._WhenFuture__sendError_anon = {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1;
    this.port_1.close$0();
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(value);
  }
};

$$._RemoteSendPortSync__call_anon = {"": "Closure;box_0",
  call$1: function(e) {
    var result = $.parse(e.get$detail(), null);
    this.box_0.result_0 = result;
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1.set$_state($.$$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (t1 != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$$indexSet$a(t1, t2._liblib6$_dispatch$1(key), t2._liblib6$_dispatch$1(val));
  }
};

$$._FutureImpl_whenComplete_anon = {"": "Closure;whenFuture_0,value_1",
  call$0: function() {
    this.whenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl_whenComplete_anon0 = {"": "Closure;whenFuture_2,error_3",
  call$0: function() {
    this.whenFuture_2._sendError$1(this.error_3);
  }
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true)
      $globalState.mainManager.postMessage$1(workerMessage);
    else {
      manager = $.$$index$as($globalState.managers, t1.get$_workerId());
      if (manager != null)
        manager.postMessage$1(workerMessage);
    }
  }
};

$$.anon = {"": "Closure;this_0",
  call$1: function(msg) {
    var receiver, method, args, result, e, t1, exception;
    try {
      t1 = this.this_0.get$_registry();
      receiver = t1.$index(t1, $.$$index$as(msg, 0));
      method = $.$$index$as(msg, 1);
      args = $.toList$0$a($.map$1$a($.$$index$as(msg, 2), $._deserialize));
      if ($.$$eq$o(method, "#call") === true) {
        result = $._serialize(receiver.call$1(args));
        return ["return", result];
      } else
        throw $.$$throw("Invocation unsupported on non-function Dart proxies");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      return ["throws", $.S(e)];
    }

  }
};

$$.ReceivePortSync_receive_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var data, t1, replyTo, message, result;
    data = $.parse(e.get$detail(), null);
    t1 = $.getInterceptor$as(data);
    replyTo = t1.$index(data, 0);
    t1 = t1.$index(data, 1);
    message = $._JsDeserializer$().deserialize$1(t1);
    result = this.this_0._callback$1(message);
    $._dispatchEvent(replyTo, $._JsSerializer$().traverse$1(result));
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add$1$a(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add$1$a(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.Stream_elementAt_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$$eq$o(t1.index_0, 0) === true) {
      this.future_1._liblib1$_setValue$1(value);
      t1.subscription_1.cancel$0();
      return;
    }
    t1.index_0 = $.$$sub$n(t1.index_0, 1);
  }
};

$$.Stream_elementAt_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.AsyncError$($.StateError$("Not enough elements for elementAt"), null));
  }
};

$$.ajaxSendJSON_anon = {"": "Closure;request_0",
  call$1: function(_) {
    var t1, t2;
    t1 = this.request_0;
    if ($.$$eq$o(t1.get$readyState(), 4) === true)
      t2 = $.$$eq$o(t1.get$status(), 200) === true || $.$$eq$o(t1.get$status(), 0) === true;
    else
      t2 = false;
    if (t2)
      $.Primitives_printString($.toString$0$abfnosu(t1.get$responseText()));
  }
};

$$.Callback__serializeResult_anon = {"": "Closure;f_0",
  call$4: function(arg1, arg2, arg3, arg4) {
    var t1, t2, t3, t4;
    t1 = $ === arg1;
    if (t1)
      arg1 = null;
    t2 = $ === arg2;
    if (t2)
      arg2 = null;
    t3 = $ === arg3;
    if (t3)
      arg3 = null;
    t4 = $ === arg4;
    if (t4)
      arg4 = null;
    if (t1)
      return $._serialize0(this.f_0.call$0());
    else if (t2) {
      t1 = this.f_0;
      return $._serialize0(t1.call$1(arg1 == null ? $.get$NONE() : $.Some$_(arg1)));
    } else if (t3) {
      t1 = this.f_0;
      t2 = arg1 == null ? $.get$NONE() : $.Some$_(arg1);
      return $._serialize0(t1.call$2(t2, arg2 == null ? $.get$NONE() : $.Some$_(arg2)));
    } else {
      t1 = this.f_0;
      if (t4) {
        t2 = arg1 == null ? $.get$NONE() : $.Some$_(arg1);
        t3 = arg2 == null ? $.get$NONE() : $.Some$_(arg2);
        return $._serialize0(t1.call$3(t2, t3, arg3 == null ? $.get$NONE() : $.Some$_(arg3)));
      } else {
        t2 = arg1 == null ? $.get$NONE() : $.Some$_(arg1);
        t3 = arg2 == null ? $.get$NONE() : $.Some$_(arg2);
        t4 = arg3 == null ? $.get$NONE() : $.Some$_(arg3);
        return $._serialize0(t1.call$4(t2, t3, t4, arg4 == null ? $.get$NONE() : $.Some$_(arg4)));
      }
    }
  },
  call$0: function() {
    return this.call$4($, $, $, $);
  },
  call$1: function(arg1) {
    return this.call$4(arg1, $, $, $);
  },
  call$2: function(arg1, arg2) {
    return this.call$4(arg1, arg2, $, $);
  },
  call$3: function(arg1, arg2, arg3) {
    return this.call$4(arg1, arg2, arg3, $);
  }
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$$lt$n(i, $.get$length$as(runCallbacks)) === true; i = $.$$add$n(i, 1)) {
      callback = $.$$index$as(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        $.addAll$1$a($.get$Timer__runCallbacks(), $.skip$1$a(runCallbacks, $.$$add$n(i, 1)));
        $.addAll$1$a($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.set$activeTimerCount($.$$sub$n(t1.get$activeTimerCount(), 1));
  }
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2(error.get$error(), error.get$stackTrace());
    }
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$$indexSet$a(t2, this.pos_1, value);
    t1.remaining_2 = $.$$sub$n(t1.remaining_2, 1);
    if ($.$$eq$o(t1.remaining_2, 0) === true)
      t1.completer_0.complete$1(t1.values_1);
  }
};

$$._deserialize_deserializeFunction = {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$as(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$$eq$o(port, $.get$_proxiedObjectTable().get$sendPort()) === true)
      return $.get$_proxiedObjectTable().get$1(id);
    else
      return $.FunctionProxy$_internal(port, id);
  }
};

$$._deserialize_deserializeObject = {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$as(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$$eq$o(port, $.get$_proxiedObjectTable().get$sendPort()) === true)
      return $.get$_proxiedObjectTable().get$1(id);
    else
      return $.Proxy$_internal(port, id);
  }
};

$$.Primitives_applyFunction_anon = {"": "Closure;namedArguments_0,buffer_1,arguments_2",
  call$1: function($name) {
    $.add$1$a(this.buffer_1, "$" + $.S($name));
    $.add$1$a(this.arguments_2, $.$$index$as(this.namedArguments_0, $name));
  }
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    isolate = $.$$index$as($globalState.isolates, t2.get$_liblib6$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_liblib6$_receivePort().get$_liblib6$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$$eq$o($globalState.currentContext.get$id(), t2.get$_liblib6$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_liblib6$_receivePort().get$_liblib6$_callback() != null) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_liblib6$_receivePort();
      t2 = this.box_0;
      t1._liblib6$_callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._initialize_anon = {"": "Closure;",
  call$1: function(_) {
    return $._enterScope();
  }
};

$$._initialize_anon0 = {"": "Closure;",
  call$1: function(args) {
    return $._exitScope($.$$index$as(args, 0));
  }
};

$$.HttpRequest_request_anon = {"": "Closure;completer_0,xhr_1",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_1;
    t2 = $.$$ge$n(t1.get$status(), 200) === true && $.$$lt$n(t1.get$status(), 300) === true || $.$$eq$o(t1.get$status(), 0) === true || $.$$eq$o(t1.get$status(), 304) === true;
    t3 = this.completer_0;
    if (t2)
      t3.complete$1(t1);
    else
      t3.completeError$1(e);
  }
};

$$.HttpRequest_request_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  }
};

$$.loadMap_anon = {"": "Closure;vTitle_0,vDescription_1,vPhoto_2,vUserTime_3,MarkerImage_4",
  call$0: function() {
    var t1, t2, mapOptions, makerShape, markerIcon, $content, infoWindow, t3, t4, t5, marker1;
    t1 = $.get$MapTypeId_ROADMAP();
    t2 = $.get$centre();
    mapOptions = $.MapOptions$();
    mapOptions.set$zoom(4);
    mapOptions.set$center(t2);
    mapOptions.set$mapTypeId(t1);
    t1 = $.GMap$(document.query$1("#mapholder"), mapOptions);
    t2 = t1._jsProxy._proxy;
    $._jsGlobalize.callSync$1($._serialize(t2.toJs$0()));
    $.map = t1;
    makerShape = $.MarkerShape$();
    makerShape.set$coords([20, 6, 22, 7, 23, 8, 24, 9, 25, 10, 25, 11, 25, 12, 25, 13, 25, 14, 25, 15, 25, 16, 25, 17, 25, 18, 25, 19, 24, 20, 23, 21, 22, 22, 20, 23, 19, 24, 8, 24, 5, 23, 4, 22, 4, 21, 4, 20, 4, 19, 10, 18, 9, 17, 8, 16, 8, 15, 7, 14, 7, 13, 7, 12, 8, 11, 8, 10, 8, 9, 9, 8, 10, 7, 11, 6, 20, 6]);
    makerShape.set$type($.get$MarkerShapeType_POLY());
    t1 = this.MarkerImage_4;
    markerIcon = $.Icon$();
    markerIcon.set$url(t1);
    $content = document.createElement("div");
    $content.set$innerHtml("    <div id=\"news\" style=\"width=100px\">\n    <b>" + $.S(this.vTitle_0) + "</b>\n    <p>" + $.S(this.vDescription_1) + "</p>\n    <p>" + $.S(this.vPhoto_2) + "</p>\n    <b>" + $.S(this.vUserTime_3) + "</b>\n    </div>\n    ");
    t1 = $.InfoWindowOptions$();
    t1.set$content($content);
    infoWindow = $.InfoWindow$(t1);
    t1 = $.get$Animation_DROP();
    t3 = $.map;
    t4 = $.get$centre();
    t5 = $.MarkerOptions$();
    t5.set$position(t4);
    t5.set$map(t5, t3);
    t5.set$draggable(false);
    t5.set$shape(makerShape);
    t5.set$animation(t1);
    t5.set$icon(markerIcon);
    marker1 = $.Marker$(t5);
    t5 = marker1.get$on().get$mouseover();
    t5.add$1(t5, new $.loadMap__anon(infoWindow, marker1));
    $.CONSTANT2.forEach$1([$.map, marker1, makerShape, infoWindow], $.retain);
  }
};

$$.loadMap__anon = {"": "Closure;infoWindow_5,marker1_6",
  call$1: function(e) {
    this.infoWindow_5.open$2($.map, this.marker1_6);
  }
};

$$._convertJsonToDart_anon = {"": "Closure;",
  call$2: function(key, value) {
    return value;
  }
};

$$._convertJsonToDart_walk = {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i]=t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$._JsonStringifier_stringifyJsonValue_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.first_0;
    t3 = this.this_1;
    if (t2 !== true)
      $.add$1$a(t3.get$sb(), ",\"");
    else
      $.add$1$a(t3.get$sb(), "\"");
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    $.add$1$a(t2.get$sb(), "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt$n(t1.i_1, 0) === true)
      $.add$1$a(t1.sb_0, ", ");
    $.add$1$a(t1.sb_0, key);
    $.add$1$a(t1.sb_0, ": ");
    $.add$1$a(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add$n(t1.i_1, 1);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout(1, value, t1);
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.add$1$a(t1, value);
    $.add$1$a(this.copies_1, null);
    return $length;
  },
  call$1$bailout: function(state0, value, t1, t3, $length) {
    switch (state0) {
      case 0:
        t1 = this.values_0;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$as(t1);
        $length = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        for (i = 0; $.CONSTANT7.$lt(i, $length); ++i) {
          t2 = t3.$index(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.add$1$a(t1, value);
        $.add$1$a(this.copies_1, null);
        return $length;
    }
  }
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    return $.$$index$as(this.copies_2, i);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    $.$$indexSet$a(this.copies_3, i, x);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.CONSTANT2.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        t2 = t1.get$current();
        copy.$indexSet(copy, t2, this.call$1(e[t2]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4 === true)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(2, e, $length, copy, $.CONSTANT2, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, copy, t1, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.CONSTANT2.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            t2 = t1.get$current();
            copy.$indexSet(copy, t2, this.call$1(e[t2]));
          }
          return copy;
        }
      case 2:
        var t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 === true ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$a(copy), i = 0; $.CONSTANT7.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout(1, value, t1);
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.add$1$a(t1, value);
    $.add$1$a(this.copies_2, null);
    return $length;
  },
  call$1$bailout: function(state0, value, t1, t3, $length) {
    switch (state0) {
      case 0:
        t1 = this.values_1;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$as(t1);
        $length = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        for (i = 0; $.CONSTANT7.$lt(i, $length); ++i) {
          t2 = t3.$index(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.add$1$a(t1, value);
        $.add$1$a(this.copies_2, null);
        return $length;
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    return $.$$index$as(this.copies_3, i);
  }
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    $.$$indexSet$a(this.copies_4, i, x);
  }
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.$isDateTime)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!e.$isRegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.$isFile())
      return e;
    if (typeof e === "object" && e !== null && e.$isBlob())
      return e;
    if (typeof e === "object" && e !== null && e.$isFileList())
      return e;
    if (typeof e === "object" && e !== null && e.$isImageData())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.$isMap()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.$isJavaScriptIndexingBehavior())
              return this.call$1$bailout(2, e, t3, elementCopy, $.CONSTANT2, copy0, $length, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(3, e, 0, 0, $.CONSTANT2, 0, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, t2, copy0, $length, slot, t3, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.$isDateTime)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!e.$isRegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.$isFile())
          return e;
        if (typeof e === "object" && e !== null && e.$isBlob())
          return e;
        if (typeof e === "object" && e !== null && e.$isFileList())
          return e;
        if (typeof e === "object" && e !== null && e.$isImageData())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.$isMap()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$as(e);
              $length = t2.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t3 = this.readSlot_6;
              copy = t3.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.CONSTANT7.$lt(i, $length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t3.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$a(copy0), j = 0; j < i; ++j)
                                    t1.$indexSet(copy0, j, t2.$index(e, j));
                                  t1.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t1 = $.getInterceptor$a(copy); $.CONSTANT7.$lt(i, $length); ++i)
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  }
};

$$.Proxy__serializeDataTree_anon = {"": "Closure;",
  call$1: function(e) {
    return $.Proxy__serializeDataTree(e);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.main = function() {
  $.HttpRequest_getString($.uri, null, null).then$1($.processString).whenComplete$1($.complete).catchError$1($.handleError);
  document.query$1("#submit").get$onClick().listen$1(new $.main_anon());
};

$.ajaxSendJSON = function() {
  var request = new XMLHttpRequest();
  request.get$onReadyStateChange().listen$1(new $.ajaxSendJSON_anon(request));
  request.open$3("POST", "/news", true);
  request.setRequestHeader("Content-Type", "application/json");
  request.send($.mapTOJSON());
};

$.mapTOJSON = function() {
  var obj = $.HashMap$();
  obj.$indexSet(obj, "title", $.get$usrTitle().get$value() == null ? "none" : $.get$usrTitle().get$value());
  obj.$indexSet(obj, "description", $.get$usrDesc().get$value() == null ? "none" : $.get$usrDesc().get$value());
  obj.$indexSet(obj, "photo", $.$$eq$o($.get$usrPhoto().get$value(), "none"));
  obj.$indexSet(obj, "time", $.get$usrTime() == null ? "none" : $.get$usrTime().get$value());
  obj.$indexSet(obj, "ip", "191.23.3.1");
  $.Primitives_printString("Sending JSON to the server...");
  return $._JsonStringifier_stringify(obj);
};

$.processString = function(jsonString) {
  var news, firstNews, t1;
  news = $.parse(jsonString, null);
  $.Primitives_printString("JSON to send:");
  $.Primitives_printString($.toString$0$abfnosu(jsonString));
  firstNews = $.$$index$as(news, 0);
  t1 = $.getInterceptor$as(firstNews);
  $.title = t1.$index(firstNews, "title");
  $.description = t1.$index(firstNews, "description");
  $.photo = t1.$index(firstNews, "photo");
  $.time = t1.$index(firstNews, "time");
  $.ip = t1.$index(firstNews, "ip");
  $.loadMap($.title, $.description, $.photo, $.time, $.markerIMG);
};

$.complete = function() {
};

$.handleError = function(error) {
  $.Primitives_printString("Uh oh, there was an error.");
  $.Primitives_printString($.toString$0$abfnosu($.toString$0$abfnosu(error)));
};

$.loadMap = function(vTitle, vDescription, vPhoto, vUserTime, MarkerImage) {
  $.scoped(new $.loadMap_anon(vTitle, vDescription, vPhoto, vUserTime, MarkerImage));
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$as(src); i >= srcStart; --i, --j)
      $.CONSTANT2.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$as(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.CONSTANT2.$indexSet(dst, j, t1.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq$o(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$n(startIndex);
  if (t1.$ge(startIndex, a.length) === true)
    return -1;
  if (t1.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; $.$$lt$n(i, endIndex) === true; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq$o(a[i], element) === true)
      return i;
  }
  return -1;
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength) {
  return new $.SubListIterable(_iterable, _start, _endOrLength);
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, $.get$length$as(iterable), 0, null);
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.MappedListIterable$ = function(_source, _f) {
  return new $.MappedListIterable(_source, _f);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.SkipIterable$ = function(_iterable, _skipCount) {
  var t1 = new $.SkipIterable(_iterable, _skipCount);
  t1.SkipIterable$2(_iterable, _skipCount);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount) {
  var t1 = new $.SkipIterator(_iterator, _skipCount);
  t1.SkipIterator$2(_iterator, _skipCount);
  return t1;
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$a(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$a(result);
  t3.add$1(result, t2);
  for (t2 = $.get$iterator$a(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      $.add$1$a(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.ToString__containsRef(visiting, o))
      $.add$1$a(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add$1$a(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.get$iterator$a(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List($));
  return result.toString$0(result);
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$a(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$a(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$a(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$as(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      $.remove$1$a($globalState.managers, sender.get$id());
      sender.terminate$0();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true)
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.Primitives_printString($.toString$0$abfnosu(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, exception;
  if ($globalState.isWorker === true)
    $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  worker.set$id(workerId);
  $.$$indexSet$a($globalState.managers, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$$add$n(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$0());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$0().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$0().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$0 = function() {
  var t1 = new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$0());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && value !== 0 || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString$0$abfnosu(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function($name, internalName, type, $arguments, argumentNames) {
  return $.JSInvocationMirror$($name, internalName, type, $arguments, argumentNames);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add$n($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq$o($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT2.get$iterator(codePoints); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.CONSTANT7.$shr(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT2.get$iterator(charCodes); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_applyFunction = function($function, positionalArguments, namedArguments) {
  var buffer, $arguments, t1, argumentCount, listOfNamedArguments, selectorName, jsFunction;
  buffer = $.StringBuffer$("");
  $arguments = [];
  if (positionalArguments != null) {
    t1 = $.get$length$as(positionalArguments);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    argumentCount = 0 + t1;
    $.CONSTANT2.addAll$1($arguments, positionalArguments);
  } else
    argumentCount = 0;
  t1 = $.getInterceptor(namedArguments);
  if (namedArguments != null && t1.get$isEmpty(namedArguments) !== true) {
    listOfNamedArguments = $.List_List$from(namedArguments.get$keys(), true);
    t1 = t1.get$length(namedArguments);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    argumentCount += t1;
    listOfNamedArguments.sort();
    $.CONSTANT2.forEach$1(listOfNamedArguments, new $.Primitives_applyFunction_anon(namedArguments, buffer, $arguments));
  }
  selectorName = "call$" + $.S(argumentCount) + $.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null)
    throw $.$$throw($.NoSuchMethodError$($function, selectorName, $arguments, $.makeLiteralMap([]), null));
  return jsFunction.apply($function, $arguments);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT0;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0$abfnosu(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq$o(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.CONSTANT2.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$();
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$._convertJsonToDart = function(json, reviver) {
  var revive = reviver == null ? new $._convertJsonToDart_anon() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT15));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT15)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  $.checkString(pattern);
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.$$throw($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.CONSTANT1.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.CONSTANT1.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT1.substring$1(receiver, startIndex));
  else
    return $.get$iterator$a($.allMatches$1$s(other, $.CONSTANT1.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.add$1(result, to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(result, receiver[i]);
        result.add$1(result, to);
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$immediateError = function(error, stackTrace) {
  return $._FutureImpl$immediateError(error, stackTrace);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediateError$2(error, stackTrace);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.get$iterator$a(futures); t3.moveNext$0() === true;) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$$add$n(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$$eq$o(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.CONSTANT16);
  t1.values_1 = $.List_List(t1.remaining_2);
  t1.completer_0 = $._CompleterImpl$();
  return t1.completer_0.get$future();
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._WhenFuture$ = function(_action) {
  return new $._WhenFuture(_action, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace, cause) {
  if (typeof error === "object" && error !== null && !!error.$isAsyncError)
    return error;
  if (cause == null)
    return $.AsyncError$(error, stackTrace);
  return $.AsyncError$withCause(error, stackTrace, cause);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _unsubscribeOnError) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _unsubscribeOnError, null, onData, onError, onDone);
  t1._BaseStreamSubscription$3(onData, onError, onDone);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _unsubscribeOnError);
  return t1;
};

$._MapStream$ = function(source, transform) {
  return new $._MapStream(transform, source);
};

$._SkipStream$ = function(source, count) {
  var t1 = new $._SkipStream(count, source);
  t1._SkipStream$2(source, count);
  return t1;
};

$.Timer_Timer = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if ($.$$lt$n(milliseconds, 0) === true)
    milliseconds = 0;
  return $.TimerImpl$(milliseconds, callback);
};

$.Timer_run = function(callback) {
  $.add$1$a($.get$Timer__runCallbacks(), callback);
  if ($.$$eq$o($.get$length$as($.get$Timer__runCallbacks()), 1) === true)
    $.Timer_Timer($.CONSTANT6, new $.Timer_run_anon());
};

$.IterableMixinWorkaround_skipList = function(list, n) {
  return $.SubListIterable$(list, n, null);
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1;
  if ($.$$eq$o($length, 0) === true)
    return;
  if (!(typeof start === "number" && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof $length === "number" && Math.floor($length) === $length))
    throw $.$$throw($.ArgumentError$($length));
  if (!(typeof from === "object" && from !== null && (from.constructor === Array || from.$isList())))
    throw $.$$throw($.ArgumentError$(from));
  if (!(typeof startFrom === "number" && Math.floor(startFrom) === startFrom))
    throw $.$$throw($.ArgumentError$(startFrom));
  if ($length < 0)
    throw $.$$throw($.ArgumentError$($length));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + $length;
  if (t1 > list.length)
    throw $.$$throw($.RangeError$value(t1));
  $.Arrays_copy(from, startFrom, list, start, $length);
};

$._HashMapTable$ = function() {
  var t1 = new $._HashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.HashMap$ = function() {
  var t1 = new $.HashMap($._HashMapTable$());
  t1.HashMap$0();
  return t1;
};

$.HashSet$ = function() {
  var t1 = new $.HashSet($._HashTable$(8));
  t1.HashSet$0();
  return t1;
};

$._HashTable$ = function(initialCapacity) {
  var t1 = new $._HashTable(null, initialCapacity, 0, 0, 0, null);
  t1._HashTable$1(initialCapacity);
  return t1;
};

$._HashTableKeyIterable$ = function(hashTable) {
  return new $._HashTableKeyIterable(hashTable);
};

$._HashTableKeyIterator$ = function(hashTable) {
  return new $._HashTableKeyIterator(hashTable, hashTable.get$_modificationCount(), 0, null);
};

$._HashTableValueIterable$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterable(_entryIndex, hashTable);
};

$._HashTableValueIterator$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterator(_entryIndex, hashTable, hashTable.get$_modificationCount(), 0, null);
};

$._LinkedHashMapTable$ = function() {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.LinkedHashMap$ = function() {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$());
  t1.LinkedHashMap$0();
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table) {
  return new $._LinkedHashTableKeyIterable(_table);
};

$._LinkedHashTableKeyIterator$ = function(hashTable) {
  return new $._LinkedHashTableKeyIterator(hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
};

$.Queue_Queue = function() {
  return $.ListQueue$(null);
};

$.ListQueue$ = function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  var t1 = $.getInterceptor$n(number);
  return t1.$and(number, t1.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var number0, nextNumber;
  number0 = $.$$shl$n(number, 2) - 1;
  for (number = number0; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration($.$$add$n($.$$add$n($.$$add$n($.$$add$n($.$$add$n($.$$mul$n(days, 86400000000), $.$$mul$n(hours, 3600000000)), $.$$mul$n(minutes, 60000000)), $.$$mul$n(seconds, 1000000)), $.$$mul$n(milliseconds, 1000)), microseconds));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0$abfnosu(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll$2$s($.replaceAll$2$s($.replaceAll$2$s($.CONSTANT1.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.Function_apply = function($function, positionalArguments, namedArguments) {
  return $.Primitives_applyFunction($function, positionalArguments, namedArguments);
};

$.List_List = function($length) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.List_List$from = function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$a(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
};

$.Map_Map = function() {
  return $.HashMap$();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.Set_Set = function() {
  return $.HashSet$();
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!(charCodes.constructor === Array))
    charCodes = $.List_List$from(charCodes, true);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return document.query$1(selector);
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$.CustomEvent_CustomEvent = function(type, canBubble, cancelable, detail) {
  var e = document.$$dom_createEvent$1("CustomEvent");
  e.$$dom_initCustomEvent$4(type, canBubble, cancelable, detail);
  return e;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.HttpRequest_getString = function(url, onProgress, withCredentials) {
  return $.HttpRequest_request(url, null, onProgress, null, null, withCredentials).then$1(new $.HttpRequest_getString_anon());
};

$.HttpRequest_request = function(url, method, onProgress, responseType, sendData, withCredentials) {
  var completer, xhr;
  completer = $._CompleterImpl$();
  xhr = new XMLHttpRequest();
  xhr.open$3(method == null ? "GET" : method, url, true);
  if (withCredentials != null)
    xhr.withCredentials = withCredentials;
  if (responseType != null)
    xhr.responseType = responseType;
  if (onProgress != null)
    xhr.get$onProgress().listen$1(onProgress);
  xhr.get$onLoad().listen$1(new $.HttpRequest_request_anon(completer, xhr));
  xhr.get$onError().listen$1(new $.HttpRequest_request_anon0(completer));
  if (sendData != null)
    xhr.send(sendData);
  else
    xhr.send$0();
  return completer.future;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains$2$as($._Device_userAgent(), "Opera", 0);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2$as($._Device_userAgent(), "MSIE", 0) === true;
};

$._Device_isFirefox = function() {
  return $.contains$2$as($._Device_userAgent(), "Firefox", 0);
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._JsSerializer$ = function() {
  return new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1, target, source, t2;
  t1 = {};
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  t2 = window.get$on();
  t2 = t2.$index(t2, source);
  t2.get$first(t2).then$1(new $._RemoteSendPortSync__call_anon(t1));
  $._dispatchEvent(target, [source, message]);
  return t1.result_0;
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  return $.ReceivePortSync__cachedIsolateId;
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  if ($.$$eq$o(isolateId, $.ReceivePortSync__isolateId()) === true)
    return $.$$index$as($.ReceivePortSync__portMap, portId).toSendPort$0();
  else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$._dispatchEvent = function(receiver, message) {
  var $event = $.CustomEvent_CustomEvent(receiver, false, false, $._JsonStringifier_stringify(message));
  window.dispatchEvent($event);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$as(array), -1, null);
};

$.convertNativeToDart_Dictionary = function(object) {
  var dict, t1, t2;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.CONSTANT2.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    t2 = t1.get$current();
    dict.$indexSet(dict, t2, object[t2]);
  }
  return dict;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq$o(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$as(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq$o(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$._completeRequest = function(request) {
  var completer = $._CompleterImpl$();
  request.get$onSuccess().listen$1(new $._completeRequest_anon(request, completer));
  request.get$onError().listen$1(new $._completeRequest_anon0(completer));
  return completer.future;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (!(typeof t1 === "string"))
    throw $.$$throw($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.StringBuffer$("");
  $._JsonStringifier$(output).stringifyValue$1(object);
  return output.toString$0(output);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2;
  t1 = $.getInterceptor$as(s);
  $length = t1.get$length(s);
  charCodes = $.List_List($);
  for (needsEscape = false, i = 0; $.CONSTANT7.$lt(i, $length); ++i) {
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = $.CONSTANT11.$shr(charCode, 12) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.CONSTANT11.$shr(charCode, 8) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.CONSTANT11.$shr(charCode, 4) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = charCode & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  $.add$1$a(sb, needsEscape ? $.String_String$fromCharCodes(charCodes) : s);
};

$.MouseEventListenerAdder$ = function(_instance, _eventName) {
  return new $.MouseEventListenerAdder(_instance, _eventName);
};

$.ProxyInvocationMirror$fromInvocationMirror = function(invocation) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = invocation.get$memberName();
  t2 = invocation.get$positionalArguments();
  t3 = invocation.get$namedArguments();
  t4 = invocation.get$isMethod();
  t5 = invocation.get$isGetter();
  t6 = invocation.get$isSetter();
  t7 = new $.ProxyInvocationMirror(t1, null, t3, t4, t5, t6);
  t7.ProxyInvocationMirror$6(t1, t2, t3, t4, t5, t6);
  return t7;
};

$.ProxyInvocationMirror$method = function(memberName, positionalArguments) {
  var t1, t2;
  t1 = $.makeLiteralMap([]);
  t2 = new $.ProxyInvocationMirror(memberName, null, t1, true, false, false);
  t2.ProxyInvocationMirror$6(memberName, positionalArguments, t1, true, false, false);
  return t2;
};

$._serialize0 = function(data) {
  var t1;
  if (typeof data === "object" && data !== null && !!data.$isIsJsProxy)
    t1 = data._jsProxy._proxy;
  else if (typeof data === "object" && data !== null && !!data.$isIsEnum)
    t1 = data.value;
  else if (typeof data === "object" && data !== null && (data.constructor === Array || data.$isList()))
    t1 = $.Proxy_Proxy$_json($.toList$0$a($.map$1$a(data, $._serialize0)));
  else
    t1 = typeof data === "object" && data !== null && !!data.$isDateTime ? $.Proxy_Proxy($.context().get$Date(), data.get$millisecondsSinceEpoch(), $, $, $) : data;
  return t1;
};

$.JsProxy$_ = function(_proxy) {
  return new $.JsProxy(_proxy);
};

$.IsJsProxy$fromJsProxy = function(proxy) {
  return new $.IsJsProxy($.JsProxy$_(proxy));
};

$.retain = function(isJsProxy) {
  var t1 = isJsProxy.get$_jsProxy().get$_proxy();
  $._jsGlobalize.callSync$1($._serialize(t1.toJs$0()));
  return isJsProxy;
};

$.Callback$many = function(f) {
  var t1, t2;
  t1 = $.Callback__serializeResult(f);
  t2 = new $.Callback0(null, null, null);
  t2.Callback$many$1(t1);
  return t2;
};

$.Callback__serializeResult = function(f) {
  return new $.Callback__serializeResult_anon(f);
};

$.None$_ = function() {
  return new $.None();
};

$.Some$_ = function(_value) {
  return new $.Some(_value);
};

$.LatLng$ = function(lat, lng, noWrap) {
  var t1, t2;
  t1 = $.get$maps().get$LatLng();
  t2 = $.CONSTANT2.map$1([lat, lng, noWrap], $._serialize0);
  t2 = t2.toList$0(t2);
  return new $.LatLng($.JsProxy$_($.Proxy_Proxy$withArgList(t1, t2)));
};

$.GEvent_GEvent = function() {
  return $.get$GEvent__INSTANCE();
};

$.GEvent$_ = function() {
  return new $.GEvent();
};

$.MapsEventListener$fromJsProxy = function(jsProxy, onRelease) {
  return new $.MapsEventListener(onRelease, $.JsProxy$_(jsProxy));
};

$.MouseEvent$fromJsProxy = function(jsProxy) {
  return new $.MouseEvent($.JsProxy$_(jsProxy));
};

$.GMap_isInstance = function(jsProxy) {
  var t1, t2, t3;
  t1 = $.get$maps().get$Map();
  t2 = $._jsPortInstanceof;
  t3 = $.CONSTANT2.map$1([jsProxy, t1], $._serialize);
  return t2.callSync$1(t3.toList$0(t3));
};

$.GMap$ = function(mapDiv, opts) {
  var t1, t2;
  t1 = $.get$maps().get$Map();
  t2 = $.CONSTANT2.map$1([mapDiv, opts], $._serialize0);
  t2 = t2.toList$0(t2);
  return new $.GMap($.JsProxy$_($.Proxy_Proxy$withArgList(t1, t2)));
};

$.GMap$fromJsProxy = function(jsProxy) {
  return new $.GMap($.JsProxy$_(jsProxy));
};

$.MapOptions$ = function() {
  return new $.MapOptions($.JsProxy$_($.map0($.makeLiteralMap([]))));
};

$.MapTypeId$_ = function(value) {
  return new $.MapTypeId(value);
};

$.Animation$_ = function(value) {
  return new $.Animation(value);
};

$.Icon$ = function() {
  return new $.Icon($.JsProxy$_($.map0($.makeLiteralMap([]))));
};

$.InfoWindow$ = function(opts) {
  var t1, t2;
  t1 = $.get$maps().get$InfoWindow();
  t2 = $.CONSTANT2.map$1([opts], $._serialize0);
  t2 = t2.toList$0(t2);
  return new $.InfoWindow($.JsProxy$_($.Proxy_Proxy$withArgList(t1, t2)));
};

$.InfoWindowOptions$ = function() {
  return new $.InfoWindowOptions($.JsProxy$_($.map0($.makeLiteralMap([]))));
};

$.Marker$ = function(opts) {
  var t1, t2;
  t1 = $.get$maps().get$Marker();
  t2 = $.CONSTANT2.map$1([opts], $._serialize0);
  t2 = t2.toList$0(t2);
  return new $.Marker($.JsProxy$_($.Proxy_Proxy$withArgList(t1, t2)));
};

$.MarkerEvents$_ = function(_marker) {
  return new $.MarkerEvents(_marker);
};

$.MarkerOptions$ = function() {
  return new $.MarkerOptions($.JsProxy$_($.map0($.makeLiteralMap([]))));
};

$.MarkerShape$ = function() {
  return new $.MarkerShape($.JsProxy$_($.map0($.makeLiteralMap([]))));
};

$.MarkerShapeType$_ = function(value) {
  return new $.MarkerShapeType(value);
};

$.StreetViewPanorama_isInstance = function(jsProxy) {
  var t1, t2, t3;
  t1 = $.get$maps().get$StreetViewPanorama();
  t2 = $._jsPortInstanceof;
  t3 = $.CONSTANT2.map$1([jsProxy, t1], $._serialize);
  return t2.callSync$1(t3.toList$0(t3));
};

$.StreetViewPanorama$fromJsProxy = function(jsProxy) {
  return new $.StreetViewPanorama($.JsProxy$_(jsProxy));
};

$._inject = function(code) {
  var script, t1;
  script = document.createElement("script");
  script.set$type("text/javascript");
  script.set$innerHtml(code);
  t1 = document.get$body().get$nodes();
  t1.add$1(t1, script);
};

$._initialize = function() {
  var t1, exception;
  if ($._jsPortSync != null)
    return;
  try {
    t1 = window;
    $._jsPortSync = t1.lookupPort$1("dart-js-context");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    $._inject("(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var receiver = table.get(message[0]);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            return [ 'return', serialize(receiver[field]) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          // TODO(vsm): Should we capture _this_ automatically?\n          return [ 'return', serialize(receiver.apply(null, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          return [ 'return', serialize(receiver[args[0]]) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments).map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = args[0];\n    args = Array.prototype.slice.call(args, 1);\n\n    // Until 10 args, the 'new' operator is used. With more arguments we use a\n    // generic way that may not work, particulary when the constructor does not\n    // have an \"apply\" method.\n    var ret = null;\n    if (args.length === 0) {\n      ret = new constructor();\n    } else if (args.length === 1) {\n      ret = new constructor(args[0]);\n    } else if (args.length === 2) {\n      ret = new constructor(args[0], args[1]);\n    } else if (args.length === 3) {\n      ret = new constructor(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      ret = new constructor(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5]);\n    } else if (args.length === 7) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 8) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 9) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 10) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8], args[9]);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler for debugging.\n  function debug() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return 'JS objects Live : ' + live +\n           ' (out of ' + total + ' ever allocated).';\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    return deserialize(args[0]) instanceof deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyDeleteProperty(args) {\n    delete deserialize(args[0])[deserialize(args[1])];\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-debug', debug);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-delete-property', proxyDeleteProperty);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    $._jsPortSync = window.lookupPort$1("dart-js-context");
  }
  $._jsPortCreate = window.lookupPort$1("dart-js-create");
  $._jsPortDebug = window.lookupPort$1("dart-js-debug");
  $._jsPortEquals = window.lookupPort$1("dart-js-equals");
  $._jsPortInstanceof = window.lookupPort$1("dart-js-instanceof");
  $._jsPortDeleteProperty = window.lookupPort$1("dart-js-delete-property");
  $._jsPortConvert = window.lookupPort$1("dart-js-convert");
  $._jsEnterJavaScriptScope = window.lookupPort$1("dart-js-enter-scope");
  $._jsExitJavaScriptScope = window.lookupPort$1("dart-js-exit-scope");
  $._jsGlobalize = window.lookupPort$1("dart-js-globalize");
  $._jsInvalidate = window.lookupPort$1("dart-js-invalidate");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon0());
  $._dartExitDartScope = t1;
  window.registerPort$2("js-dart-enter-scope", $._dartEnterDartScope.toSendPort$0());
  window.registerPort$2("js-dart-exit-scope", $._dartExitDartScope.toSendPort$0());
};

$.context = function() {
  if ($.$$eq$o($._depth(), 0) === true)
    throw $.$$throw("Cannot get JavaScript context out of scope.");
  return $._deserialize($._jsPortSync.callSync$1([]));
};

$._depth = function() {
  return $.get$_proxiedObjectTable().get$_scopeIndices().length;
};

$.scoped = function(f) {
  var depth, t1;
  depth = $._enterScope();
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._exitScope(depth);
  }
};

$._enterScope = function() {
  $._initialize();
  $.get$_proxiedObjectTable().enterScope$0();
  $._jsEnterJavaScriptScope.callSync$1([]);
  return $.get$_proxiedObjectTable().get$_scopeIndices().length;
};

$._exitScope = function(depth) {
  $._jsExitJavaScriptScope.callSync$1([]);
  $.get$_proxiedObjectTable().exitScope$0();
};

$.retain0 = function(object) {
  $._jsGlobalize.callSync$1($._serialize(object.toJs$0()));
  return object;
};

$.map0 = function(data) {
  return $.Proxy_Proxy$_json(data);
};

$.Proxy_Proxy = function($constructor, arg1, arg2, arg3, arg4) {
  var t1, t2, t3, t4, $arguments;
  t1 = $ === arg1;
  if (t1)
    arg1 = null;
  t2 = $ === arg2;
  if (t2)
    arg2 = null;
  t3 = $ === arg3;
  if (t3)
    arg3 = null;
  t4 = $ === arg4;
  if (t4)
    arg4 = null;
  if (!t4)
    $arguments = [arg1, arg2, arg3, arg4];
  else if (!t3)
    $arguments = [arg1, arg2, arg3];
  else if (!t2)
    $arguments = [arg1, arg2];
  else
    $arguments = !t1 ? [arg1] : [];
  return $.Proxy_Proxy$withArgList($constructor, $arguments);
};

$.Proxy_Proxy$withArgList = function($constructor, $arguments) {
  var t1, serialized;
  if ($.get$_proxiedObjectTable().get$_scopeIndices().length === 0)
    throw $.$$throw("Cannot create Proxy out of scope.");
  t1 = [$constructor];
  $.CONSTANT2.addAll$1(t1, $arguments);
  t1 = $.CONSTANT2.map$1(t1, $._serialize);
  serialized = t1.toList$0(t1);
  return $._deserialize($._jsPortCreate.callSync$1(serialized));
};

$.Proxy_Proxy$_json = function(data) {
  if ($.get$_proxiedObjectTable().get$_scopeIndices().length === 0)
    throw $.$$throw("Cannot create Proxy out of scope.");
  return $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(data)));
};

$.Proxy__serializeDataTree = function(data) {
  var entries, t1, t2;
  if (typeof data === "object" && data !== null && data.$isMap()) {
    entries = $.List_List($);
    for (t1 = $.get$iterator$a(data.get$keys()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      entries.push([t2, $.Proxy__serializeDataTree(data.$index(data, t2))]);
    }
    return ["map", entries];
  } else if (typeof data === "object" && data !== null && (data.constructor === Array || data.$isList()))
    return ["list", $.toList$0$a($.map$1$a(data, new $.Proxy__serializeDataTree_anon()))];
  else
    return ["simple", $._serialize(data)];
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy(_port, _id);
};

$.Proxy__forward = function(receiver, member, kind, args) {
  var result, t1;
  if ($.get$_proxiedObjectTable().get$_scopeIndices().length === 0)
    throw $.$$throw("Cannot access a JavaScript proxy out of scope.");
  result = receiver._port.callSync$1([receiver._liblib2$_id, member, kind, $.toList$0$a($.map$1$a(args, $._serialize))]);
  t1 = $.getInterceptor$as(result);
  switch (t1.$index(result, 0)) {
    case "return":
      return $._deserialize(t1.$index(result, 1));
    case "throws":
      throw $.$$throw($._deserialize(t1.$index(result, 1)));
    case "none":
      throw $.$$throw($.NoSuchMethodError$(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.$$throw("Invalid return value");
  }
};

$.FunctionProxy$_internal = function(port, id) {
  return new $.FunctionProxy(port, id);
};

$._ProxiedObjectTable$ = function() {
  var t1, t2, t3, t4;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List($);
  t4 = $.List_List($);
  t4 = new $._ProxiedObjectTable("dart-ref", 0, 0, t1, t2, $.Set_Set(), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$._serialize = function(message) {
  var t1;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!message.$isSendPortSync)
    return message;
  else {
    if (typeof message === "object" && message !== null && message.$isElement()) {
      t1 = message.ownerDocument;
      t1 = t1 == null || $.$$eq$o(t1, document);
    } else
      t1 = false;
    if (t1)
      return ["domref", $._serializeElement(message)];
    else if (typeof message === "object" && message !== null && !!message.$isCallback)
      return message.get$_serialized();
    else if (typeof message === "object" && message !== null && !!message.$isProxy)
      return ["objref", message._liblib2$_id, message._port];
    else if (typeof message === "object" && message !== null && !!message.$isSerializable)
      return $._serialize(message.toJs$0());
    else
      return ["objref", $.add$1$a($.get$_proxiedObjectTable(), message), $.get$_proxiedObjectTable().get$sendPort()];
  }
};

$._deserialize = function(message) {
  var t1, t2, t3;
  t1 = new $._deserialize_deserializeFunction();
  t2 = new $._deserialize_deserializeObject();
  t3 = $.getInterceptor(message);
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!message.$isSendPortSync)
    return message;
  switch (t3.$index(message, 0)) {
    case "funcref":
      return t1.call$1(message);
    case "objref":
      return t2.call$1(message);
    case "domref":
      return $._deserializeElement(t3.$index(message, 1));
  }
  throw $.$$throw("Unsupported serialized data: " + $.S(message));
};

$._serializeElement = function(e) {
  var t1, id, t2, $top, newValue;
  if (e.get$attributes().containsKey$1("data-dart_id") === true) {
    t1 = e.get$attributes();
    id = t1.$index(t1, "data-dart_id");
  } else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.$$add$n(t1, 1);
    id = "dart-" + $.S(t1);
    t2 = e.get$attributes();
    t2.$indexSet(t2, "data-dart_id", id);
  }
  t1 = document.documentElement;
  if (e == null ? t1 != null : e !== t1)
    for ($top = e; true;) {
      if ($top.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        t1 = $top.get$attributes();
        newValue = $.concat$1$s(t1.$index(t1, "data-dart_temporary_attached"), "a");
        t2 = $top.get$attributes();
        t2.$indexSet(t2, "data-dart_temporary_attached", newValue);
        break;
      }
      if ($top.get$parent() == null) {
        t1 = $top.get$attributes();
        t1.$indexSet(t1, "data-dart_temporary_attached", "a");
        $.add$1$a(document.documentElement.get$children(), $top);
        break;
      }
      t1 = $top.get$parent();
      t2 = document.documentElement;
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      $top = $top.get$parent();
    }
  return id;
};

$._deserializeElement = function(id) {
  var t1, list, e, $top, newValue, t2;
  t1 = "[data-dart_id=\"" + $.S(id) + "\"]";
  list = document.queryAll$1(t1);
  if ($.$$gt$n(list.get$length(list), 1) === true)
    throw $.$$throw("Non unique ID: " + $.S(id));
  if ($.$$eq$o(list.get$length(list), 0) === true)
    throw $.$$throw("Only elements attached to document can be serialized: " + $.S(id));
  e = list.$index(list, 0);
  t1 = document.documentElement;
  if (e == null ? t1 != null : e !== t1)
    for ($top = e; true;) {
      if ($top.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        t1 = $top.get$attributes();
        newValue = $.substring$1$s(t1.$index(t1, "data-dart_temporary_attached"), 1);
        t2 = $top.get$attributes();
        t2.$indexSet(t2, "data-dart_temporary_attached", newValue);
        t1 = $top.get$attributes();
        if ($.$$eq$o($.get$length$as(t1.$index(t1, "data-dart_temporary_attached")), 0) === true) {
          t1 = $top.get$attributes();
          t1.remove$1(t1, "data-dart_temporary_attached");
          $.remove$0$a($top);
        }
        break;
      }
      t1 = $top.get$parent();
      t2 = document.documentElement;
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      $top = $top.get$parent();
    }
  return e;
};

$.processString.call$1 = $.processString;
$.processString.$name = "processString";
$.complete.call$0 = $.complete;
$.complete.$name = "complete";
$.handleError.call$1 = $.handleError;
$.handleError.$name = "handleError";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$._serialize0.call$1 = $._serialize0;
$._serialize0.$name = "_serialize0";
$.retain.call$1 = $.retain;
$.retain.$name = "retain";
$._serialize.call$1 = $._serialize;
$._serialize.$name = "_serialize";
$._deserialize.call$1 = $._deserialize;
$._deserialize.$name = "_deserialize";
$.List = {builtin$cls: "List"};
$.Map = {builtin$cls: "Map"};
$.num = {builtin$cls: "num"};
$.TextTrack = {builtin$cls: "TextTrack"};
$.File = {builtin$cls: "File"};
$.TextTrackCue = {builtin$cls: "TextTrackCue"};
$.Match = {builtin$cls: "Match"};
$.CssRule = {builtin$cls: "CssRule"};
$.Touch = {builtin$cls: "Touch"};
$.String = {builtin$cls: "String"};
$.CssValue = {builtin$cls: "CssValue"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.Gamepad = {builtin$cls: "Gamepad"};
$.bool = {builtin$cls: "bool"};
$.$double = {builtin$cls: "$double"};
$.Length = {builtin$cls: "Length"};
$.Transform = {builtin$cls: "Transform"};
$.HttpRequest = {builtin$cls: "HttpRequest"};
$.DomMimeType = {builtin$cls: "DomMimeType"};
$.SourceBuffer = {builtin$cls: "SourceBuffer"};
$.DomPlugin = {builtin$cls: "DomPlugin"};
$.Number = {builtin$cls: "Number"};
$.SpeechGrammar = {builtin$cls: "SpeechGrammar"};
$.SpeechInputResult = {builtin$cls: "SpeechInputResult"};
$.Node = {builtin$cls: "Node"};
$.PathSeg = {builtin$cls: "PathSeg"};
$.SpeechRecognitionResult = {builtin$cls: "SpeechRecognitionResult"};
$.Element = {builtin$cls: "Element"};
$.ClientRect = {builtin$cls: "ClientRect"};
$.StyleSheet = {builtin$cls: "StyleSheet"};
$.$int = {builtin$cls: "$int"};
$.EntrySync = {builtin$cls: "EntrySync"};
$.Entry = {builtin$cls: "Entry"};
$.ElementInstance = {builtin$cls: "ElementInstance"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.CONSTANT4 = new $._NullKey();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT16 = Isolate.makeConstantList([]);
$.CONSTANT = new $.EventStreamProvider("click");
$.CONSTANT2 = new $.JSArray();
$.CONSTANT0 = new $.NullThrownError();
$.CONSTANT5 = new $.JSNull();
$.CONSTANT11 = new $.JSInt();
$.CONSTANT1 = new $.JSString();
$.CONSTANT13 = new $.EventStreamProvider("progress");
$.CONSTANT15 = new $.Object();
$.CONSTANT7 = new $.JSNumber();
$.CONSTANT8 = new $._LinkedHashTableHeadMarker();
$.CONSTANT10 = new $.EventStreamProvider("success");
$.CONSTANT12 = new $.EventStreamProvider("load");
$.CONSTANT9 = new $.EventStreamProvider("error");
$.CONSTANT14 = new $.EventStreamProvider("readystatechange");
$.CONSTANT3 = new $._DeadEntry();
$.CONSTANT6 = new $.Duration(0);
$.map = null;
$.markerIMG = "combined.png";
$.title = "none";
$.description = "none";
$.photo = "none";
$.time = "none";
$.ip = "none";
$.uri = "news.json";
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$._cachedBrowserPrefix = null;
$.ReceivePortSync__portMap = null;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$._jsPortSync = null;
$._jsPortCreate = null;
$._jsPortDebug = null;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$._jsPortDeleteProperty = null;
$._jsPortConvert = null;
$._jsEnterJavaScriptScope = null;
$._jsExitJavaScriptScope = null;
$._jsGlobalize = null;
$._jsInvalidate = null;
$._dartEnterDartScope = null;
$._dartExitDartScope = null;
$._localNextElementId = 0;
$.$$add$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$n(receiver).$add(receiver, a0);
};
$.$$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$$eq$o = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$$index$as = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$as(receiver).$index(receiver, a0);
};
$.$$indexSet$a = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$a(receiver).$indexSet(receiver, a0, a1);
};
$.$$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$$shr$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shr(receiver, a0);
};
$.$$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.add$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).add$1(receiver, a0);
};
$.addAll$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.concat$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).concat$1(receiver, a0);
};
$.contains$2$as = function(receiver, a0, a1) {
  return $.getInterceptor$as(receiver).contains$2(receiver, a0, a1);
};
$.elementAt$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).forEach$1(receiver, a0);
};
$.get$hashCode$abnosu = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$isEmpty$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$isEmpty(receiver);
};
$.get$iterator$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$iterator(receiver);
};
$.get$length$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$length(receiver);
};
$.indexOf$2$as = function(receiver, a0, a1) {
  return $.getInterceptor$as(receiver).indexOf$2(receiver, a0, a1);
};
$.map$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).map$1(receiver, a0);
};
$.noSuchMethod$1$o = function(receiver, a0) {
  return $.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
$.remainder$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).remainder$1(receiver, a0);
};
$.remove$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).remove$0(receiver);
};
$.remove$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).remove$1(receiver, a0);
};
$.removeLast$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).removeLast$0(receiver);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.set$map$a = function(receiver, value) {
  return $.getInterceptor$a(receiver).set$map(receiver, value);
};
$.setRange$4$a = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$a(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
$.skip$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).skip$1(receiver, a0);
};
$.substring$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).substring$1(receiver, a0);
};
$.toList$0$a = function(receiver) {
  return $.getInterceptor$a(receiver).toList$0(receiver);
};
$.toString$0$abfnosu = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$as = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
Isolate.$lazy($, "centre", "centre", "get$centre", function() {
  return $.retain($.LatLng$(-29.5, 132.1, null));
});
Isolate.$lazy($, "usrTitle", "usrTitle", "get$usrTitle", function() {
  return $.query("#title");
});
Isolate.$lazy($, "usrDesc", "usrDesc", "get$usrDesc", function() {
  return $.query("#description");
});
Isolate.$lazy($, "usrPhoto", "usrPhoto", "get$usrPhoto", function() {
  return $.query("#photo");
});
Isolate.$lazy($, "usrTime", "usrTime", "get$usrTime", function() {
  return $.query("#time");
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "maps", "maps", "get$maps", function() {
  return $.retain0($.context().get$google().get$maps());
});
Isolate.$lazy($, "NONE", "NONE", "get$NONE", function() {
  return $.None$_();
});
Isolate.$lazy($, "_INSTANCE", "GEvent__INSTANCE", "get$GEvent__INSTANCE", function() {
  return $.GEvent$_();
});
Isolate.$lazy($, "ROADMAP", "MapTypeId_ROADMAP", "get$MapTypeId_ROADMAP", function() {
  return $.MapTypeId$_($.get$maps().get$MapTypeId().get$ROADMAP());
});
Isolate.$lazy($, "DROP", "Animation_DROP", "get$Animation_DROP", function() {
  return $.Animation$_($.get$maps().get$Animation().get$DROP());
});
Isolate.$lazy($, "POLY", "MarkerShapeType_POLY", "get$MarkerShapeType_POLY", function() {
  return $.MarkerShapeType$_("poly");
});
Isolate.$lazy($, "_proxiedObjectTable", "_proxiedObjectTable", "get$_proxiedObjectTable", function() {
  return $._ProxiedObjectTable$();
});
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isMap: function() {
    return false;
  },
  $isArrayBuffer: function() {
    return false;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $isBlob: function() {
    return false;
  },
  $isElement: function() {
    return false;
  },
  $isFile: function() {
    return false;
  },
  $isFileList: function() {
    return false;
  },
  $isImageData: function() {
    return false;
  },
  $isNode: function() {
    return false;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("AbstractWorker", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "type<",
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("DOMApplicationCache", {"": "status>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "coords<,shape<"});

$.$defineNativeClass("ArrayBuffer", {
  $isArrayBuffer: function() {
    return true;
  },
  $asArrayBuffer: function() {
    return null;
  }
});

$.$defineNativeClass("ArrayBufferView", {
  $isArrayBufferView: function() {
    return true;
  },
  $asArrayBufferView: function() {
    return null;
  }
});

$.$defineNativeClass("BatteryManager", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("Blob", {
  $isBlob: function() {
    return true;
  },
  $asBlob: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "type<,value>"});

$.$defineNativeClass("CharacterData", {"": "length>"});

$.$defineNativeClass("WebKitCSSMatrix", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  setProperty$3: function(propertyName, value, priority) {
    var exception;
    try {
      this.setProperty(propertyName, value, priority);
      if (!!this.setAttribute)
        this.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  set$animation: function(value) {
    this.setProperty$3($.S($._browserPrefix()) + "animation", value, "");
  },
  set$content: function(value) {
    this.setProperty$3("content", value, "");
  },
  set$position: function(value) {
    this.setProperty$3("position", value, "");
  },
  set$zoom: function(value) {
    this.setProperty$3("zoom", value, "");
  }
});

$.$defineNativeClass("CustomEvent", {"": "detail>",
  $$dom_initCustomEvent$4: function(typeArg, canBubbleArg, cancelableArg, detailArg) {
    return this.initCustomEvent(typeArg,canBubbleArg,cancelableArg,detailArg);
  }
});

$.$defineNativeClass("DataTransferItemList", {"": "length>",
  add$2: function(_, data_OR_file, type) {
    return this.add(data_OR_file,type);
  },
  add$1: function($receiver, data_OR_file) {
    return this.add($receiver);
  }
});

$.$defineNativeClass("DedicatedWorkerContext", {
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this.postMessage($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this.postMessage($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  }
});

$.$defineNativeClass("HTMLDetailsElement", {
  open$2: function(arg0, arg1) {
    return this.open.call$2(arg0, arg1);
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~,documentElement>,readyState>",
  $$dom_createEvent$1: function(eventType) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_createEvent$1")) {
      return this.createEvent(eventType);
    } else
      return Object.prototype.$$dom_createEvent$1.call(this, eventType);
  },
  get$onClick: function() {
    return $.CONSTANT.forTarget$1(this);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors))
      return this.getElementById($.CONSTANT1.substring$1(selectors, 1));
    return this.querySelector(selectors);
  },
  queryAll$1: function(selectors) {
    var mutableMatches, len, copyOfMatches, t1, i;
    if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors)) {
      mutableMatches = this.getElementsByName($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.$isJavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(1, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List(len);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors)) {
      mutableMatches = this.getElementsByTagName(selectors);
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.$isJavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(3, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List(len);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else
      return $._FrozenElementList$_wrap(this.querySelectorAll(selectors));
  },
  queryAll$1$bailout: function(state0, mutableMatches, t2, len) {
    switch (state0) {
      case 0:
      default:
        var copyOfMatches, i, t1;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors))
          switch (state0) {
            case 0:
              mutableMatches = this.getElementsByName($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$as(mutableMatches);
              len = t2.get$length(mutableMatches);
            case 2:
              state0 = 0;
              copyOfMatches = $.List_List(len);
              for (i = 0; $.CONSTANT7.$lt(i, len); ++i) {
                t1 = t2.$index(mutableMatches, i);
                if (i >= copyOfMatches.length)
                  throw $.ioore(i);
                copyOfMatches[i] = t1;
              }
              return $._FrozenElementList$_wrap(copyOfMatches);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors))
                switch (state0) {
                  case 0:
                    mutableMatches = this.getElementsByTagName(selectors);
                  case 3:
                    state0 = 0;
                    t2 = $.getInterceptor$as(mutableMatches);
                    len = t2.get$length(mutableMatches);
                  case 4:
                    state0 = 0;
                    copyOfMatches = $.List_List(len);
                    for (i = 0; $.CONSTANT7.$lt(i, len); ++i) {
                      t1 = t2.$index(mutableMatches, i);
                      if (i >= copyOfMatches.length)
                        throw $.ioore(i);
                      copyOfMatches[i] = t1;
                    }
                    return $._FrozenElementList$_wrap(copyOfMatches);
                }
              else
                return $._FrozenElementList$_wrap(this.querySelectorAll(selectors));
          }
    }
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return this._children;
  },
  set$innerHtml: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var t1, e, nodes;
      t1 = this.get$nodes();
      t1.clear$0(t1);
      e = $.Element_Element$tag("div");
      e.set$innerHtml(value);
      nodes = $.List_List$from(e.get$nodes(), true);
      t1 = this.get$nodes();
      t1.addAll$1(t1, nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, value);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Plugin", {"": "length>"});

$.$defineNativeClass("PluginArray", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Selection", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("DOMSettableTokenList", {"": "value>"});

$.$defineNativeClass("DOMStringList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("DOMTokenList", {"": "length>",
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children~,draggable<,id>,innerHtml:innerHTML|,$$dom_attributes:attributes~,$$dom_lastElementChild:lastElementChild~",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  $$dom_getAttribute$1: function($name) {
    return this.getAttribute($name);
  },
  $$dom_hasAttribute$1: function($name) {
    return this.hasAttribute($name);
  },
  $$dom_setAttribute$2: function($name, value) {
    return this.setAttribute($name,value);
  },
  get$onClick: function() {
    return $.CONSTANT.forTarget$1(this);
  },
  get$onError: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onError")) {
      return $.CONSTANT9.forTarget$1(this);
    } else
      return Object.prototype.get$onError.call(this);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "type<"});

$.$defineNativeClass("Entry", {
  remove$2: function(_, successCallback, errorCallback) {
    return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$1: function($receiver, successCallback) {
    successCallback = $.convertDartClosureToJS(successCallback, 0);
    return this.remove($receiver);
  }
});

$.$defineNativeClass("EntrySync", {
  remove$0: function(_) {
    return this.remove();
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("EventSource", {"": "readyState>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    return $.Events$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("File", {
  $isFile: function() {
    return true;
  },
  $asFile: function() {
    return null;
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isFileList: function() {
    return true;
  },
  $asFileList: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.File]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.File]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("FileReader", {"": "error>,readyState>,result>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("FileWriter", {"": "error>,length>,readyState>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("FileWriterSync", {"": "length>"});

$.$defineNativeClass("Float32Array", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.num]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.num]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.num]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.num]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("Gamepad", {"": "id>"});

$.$defineNativeClass("History", {"": "length>"});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  }
});

$.$defineNativeClass("XMLHttpRequest", {"": "readyState>,responseText>,status>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  open$5: function(method, url, async, user, password) {
    return this.open(method,url,async,user,password);
  },
  open$2: function(method, url) {
    return this.open(method, url);
  },
  open$3: function(method, url, async) {
    return this.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  },
  send$0: function() {
    return this.send();
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onLoad: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  get$onProgress: function() {
    return $.CONSTANT13.forTarget$1(this);
  },
  get$onReadyStateChange: function() {
    return $.CONSTANT14.forTarget$1(this);
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestUpload", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("ImageData", {
  $isImageData: function() {
    return true;
  },
  $asImageData: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLImageElement", {
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "pattern>,type<,value>",
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLLIElement", {"": "type<,value>"});

$.$defineNativeClass("HTMLLinkElement", {"": "type<"});

$.$defineNativeClass("Location", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("MediaController", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "error>,readyState>"});

$.$defineNativeClass("MediaList", {"": "length>"});

$.$defineNativeClass("MediaSource", {"": "readyState>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStream", {"": "id>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamTrack", {"": "id>,readyState>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MessageEvent", {"": "ports>"});

$.$defineNativeClass("MessagePort", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this.postMessage($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this.postMessage($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMetaElement", {"": "content<"});

$.$defineNativeClass("HTMLMeterElement", {"": "value>"});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("Node", {"": "$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,parent:parentElement~",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function(_) {
    var t1 = this.parentNode;
    if (t1 != null)
      t1.removeChild(this);
  },
  replaceWith$1: function(otherNode) {
    var $parent, exception;
    try {
      $parent = this.parentNode;
      $parent.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Notification", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  cancel$0: function() {
    return this.cancel();
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function() {
    return $.CONSTANT.forTarget$1(this);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type<"});

$.$defineNativeClass("HTMLObjectElement", {"": "type<"});

$.$defineNativeClass("HTMLOptionElement", {"": "value>"});

$.$defineNativeClass("HTMLOutputElement", {"": "value>"});

$.$defineNativeClass("HTMLParamElement", {"": "value>"});

$.$defineNativeClass("HTMLProgressElement", {"": "value>"});

$.$defineNativeClass("RadioNodeList", {"": "value>"});

$.$defineNativeClass("Range", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("RangeException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("RTCDataChannel", {"": "readyState>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("RTCPeerConnection", {"": "readyState>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCSessionDescription", {"": "type<"});

$.$defineNativeClass("RTCStatsResponse", {
  result$0: function() {
    return this.result();
  },
  get$result: function() {
    return new $.BoundClosure$0(this, "result$0");
  }
});

$.$defineNativeClass("RTCDTMFSender", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "event>,type<"});

$.$defineNativeClass("ScriptProfileNode", {
  children$0: function() {
    return this.children();
  },
  get$children: function() {
    return new $.BoundClosure$0(this, "children$0");
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length>,value>"});

$.$defineNativeClass("ShadowRoot", {"": "innerHtml:innerHTML|"});

$.$defineNativeClass("SourceBufferList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "type<"});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognition", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("SpeechRecognitionEvent", {"": "result>"});

$.$defineNativeClass("SpeechRecognitionResult", {"": "length>"});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return this.getItem(key) != null;
  },
  $index: function(_, key) {
    return this.getItem(key);
  },
  $indexSet: function(_, key, value) {
    this.setItem(key, value);
  },
  remove$1: function(_, key) {
    var value = this.getItem(key);
    this.removeItem(key);
    return value;
  },
  forEach$1: function(_, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.key(i);
      if (key == null)
        return;
      f.call$2(key, this.getItem(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(this, new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(this, new $.Storage_values_anon(values));
    return values;
  },
  get$length: function(_) {
    return this.length;
  },
  get$isEmpty: function(_) {
    return this.key(0) == null;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function () { return [$.String, $.String]; };
  }
});

$.$defineNativeClass("HTMLStyleElement", {"": "type<"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "value>"});

$.$defineNativeClass("TextTrack", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCue", {"": "id>,position<",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrackCue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrackCue]; };
  }
});

$.$defineNativeClass("TextTrackList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrack]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrack]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("TimeRanges", {"": "length>"});

$.$defineNativeClass("TouchList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Touch]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Touch]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLTrackElement", {"": "readyState>"});

$.$defineNativeClass("UIEvent", {"": "detail>"});

$.$defineNativeClass("Uint16Array", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this, _);
  },
  $index: function(_, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return this[index];
    } else
      return Object.prototype.$index.call(this, _, index);
  },
  $indexSet: function(_, index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      this[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, _, index, value);
  },
  get$iterator: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this, _);
  },
  forEach$1: function(_, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, _, f);
  },
  map$1: function(_, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("map$1")) {
      return $.MappedListIterable$(this, f);
    } else
      return Object.prototype.map$1.call(this, _, f);
  },
  toList$1$growable: function(_, growable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$1$growable")) {
      return $.List_List$from(this, growable);
    } else
      return Object.prototype.toList$1$growable.call(this, _, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return this.get$length(this) === 0;
    } else
      return Object.prototype.get$isEmpty.call(this, _);
  },
  skip$1: function(_, n) {
    if (Object.getPrototypeOf(this).hasOwnProperty("skip$1")) {
      return $.IterableMixinWorkaround_skipList(this, n);
    } else
      return Object.prototype.skip$1.call(this, _, n);
  },
  elementAt$1: function(_, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("elementAt$1")) {
      return this.$index(this, index);
    } else
      return Object.prototype.elementAt$1.call(this, _, index);
  },
  add$1: function(_, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, _, value);
  },
  addAll$1: function(_, iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, _, iterable);
  },
  indexOf$2: function(_, element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, this.get$length(this));
    } else
      return Object.prototype.indexOf$2.call(this, _, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this, _);
  },
  remove$1: function(_, object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, _, object);
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    if (Object.getPrototypeOf(this).hasOwnProperty("setRange$4")) {
      throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
    } else
      return Object.prototype.setRange$4.call(this, _, start, rangeLength, from, startFrom);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    this[index] = value;
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("WebKitNamedFlow", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WebSocket", {"": "readyState>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$2: function(code, reason) {
    return this.close(code,reason);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("DOMWindow", {"": "event>,navigator>,status>",
  lookupPort$1: function($name) {
    var t1, portStr, port;
    t1 = this.get$document().get$documentElement().get$attributes();
    portStr = t1.$index(t1, "dart-port:" + $name);
    if (portStr == null)
      return;
    port = $.parse(portStr, null);
    return $._JsDeserializer$().deserialize$1(port);
  },
  registerPort$2: function($name, port) {
    var serialized, t1;
    serialized = $._JsSerializer$().traverse$1(port);
    t1 = this.get$document().get$documentElement().get$attributes();
    t1.$indexSet(t1, "dart-port:" + $name, $._JsonStringifier_stringify(serialized));
  },
  get$document: function() {
    return this.document;
  },
  open$3: function(url, $name, options) {
    if (options == null)
      return $._DOMWindowCrossFrame__createSafe(this.open(url,$name));
    else
      return $._DOMWindowCrossFrame__createSafe(this.open(url,$name,options));
  },
  open$2: function(url, name) {
    return this.open$3(url, name, null);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function() {
    return $.CONSTANT.forTarget$1(this);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("Worker", {
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this.postMessage($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this.postMessage($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  terminate$0: function() {
    return this.terminate();
  }
});

$.$defineNativeClass("WorkerContext", {"": "navigator>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("WorkerLocation", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("WorkerNavigator", {"": "userAgent>"});

$.$defineNativeClass("XPathException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("XSLTProcessor", {
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.ClientRect]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.ClientRect]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssRule]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssRule]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssValue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssValue]; };
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Entry]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Entry]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.EntrySync]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.EntrySync]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Gamepad]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Gamepad]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this[index];
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this[index];
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("IDBCursorWithValue", {
  get$value: function() {
    return $._convertNativeToDart_IDBAny(this.value);
  }
});

$.$defineNativeClass("IDBDatabase", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("IDBIndex", {
  get$1: function(key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = this.get(key);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $.Future_Future$immediateError(e, stacktrace);
    }

  }
});

$.$defineNativeClass("IDBObjectStore", {
  add$2: function(_, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this.$$dom_add$2(value, key);
      else
        request = this.$$dom_add$1(value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $.Future_Future$immediateError(e, stacktrace);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  $$dom_add$2: function(value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return this.add($._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return this.add($._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_add$1: function(value) {
    return this.$$dom_add$2(value, $);
  }
});

$.$defineNativeClass("IDBRequest", {"": "error>,readyState>",
  get$result: function() {
    return $._convertNativeToDart_IDBAny(this.result);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onSuccess: function() {
    return $.CONSTANT10.forTarget$1(this);
  }
});

$.$defineNativeClass("IDBTransaction", {"": "error>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return $.convertNativeToDart_Dictionary(this.item(index));
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return $.convertNativeToDart_Dictionary(this.item(index));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Map]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Map]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGAngle", {"": "value>"});

$.$defineNativeClass("SVGElementInstance", {
  get$onClick: function() {
    return $.CONSTANT.forTarget$1(this);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "result>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "result>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "result>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "result>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "result>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "result>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "result>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "result>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "result>"});

$.$defineNativeClass("SVGFEImageElement", {"": "result>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "result>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "result>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "result>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "result>"});

$.$defineNativeClass("SVGFETileElement", {"": "result>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "result>"});

$.$defineNativeClass("SVGLength", {"": "value>"});

$.$defineNativeClass("SVGLengthList", {
  $index: function(_, index) {
    return this.getItem(index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function(_) {
    return this.numberOfItems;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this.getItem(index);
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Length]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Length]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGNumber", {"": "value>"});

$.$defineNativeClass("SVGNumberList", {
  $index: function(_, index) {
    return this.getItem(index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function(_) {
    return this.numberOfItems;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this.getItem(index);
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Number]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Number]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGPathSegList", {
  $index: function(_, index) {
    return this.getItem(index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function(_) {
    return this.numberOfItems;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this.getItem(index);
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.PathSeg]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.PathSeg]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGScriptElement", {"": "type<"});

$.$defineNativeClass("SVGStringList", {
  $index: function(_, index) {
    return this.getItem(index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function(_) {
    return this.numberOfItems;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this.getItem(index);
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGStyleElement", {"": "type<"});

$.$defineNativeClass("SVGDocument", {
  $$dom_createEvent$1: function(eventType) {
    return this.createEvent(eventType);
  }
});

$.$defineNativeClass("SVGElement", {
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  set$children: function(value) {
    var children = this.get$children();
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(svg) {
    var container = $.Element_Element$tag("div");
    container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children($.$$index$as(container.get$children(), 0).get$children());
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function() {
    return this.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("SVGTransformList", {
  $index: function(_, index) {
    return this.getItem(index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function(_) {
    return this.numberOfItems;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$$eq$o(this.get$length(this), 0);
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this.getItem(index);
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Transform]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Transform]; };
  }
});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function(_) {
    return this.length;
  },
  $index: function(_, index) {
    return this.item(index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(_) {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  skip$1: function(_, n) {
    return $.IterableMixinWorkaround_skipList(this, n);
  },
  elementAt$1: function(_, index) {
    return this.item(index);
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(_, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(_, start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "result>"});

$.$defineNativeClass("AudioBuffer", {"": "length>"});

$.$defineNativeClass("AudioParam", {"": "value>"});

$.$defineNativeClass("BiquadFilterNode", {"": "type<"});

$.$defineNativeClass("OscillatorNode", {"": "type<"});

// 177 dynamic classes.
// 322 classes
// 32 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_MediaElement = "HTMLMediaElement|HTMLAudioElement|HTMLVideoElement", v2_SvgElement = "SVGElement|SVGStyledElement|SVGAElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTRefElement|SVGTextPathElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFESpecularLightingElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGImageElement|SVGLineElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGMarkerElement|SVGMaskElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGStopElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGFEDropShadowElement|SVGGlyphRefElement|SVGMissingGlyphElement|SVGAnimationElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGAnimateColorElement|SVGFEDistantLightElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGViewElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMPathElement|SVGVKernElement", v3_Element = [v1_MediaElement, v2_SvgElement, "Element|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement"].join("|"), v4_CharacterData = "CharacterData|Text|CDATASection|Comment", v5_Document = "Document|HTMLDocument|SVGDocument", v6_DocumentFragment = "DocumentFragment|ShadowRoot", v7_Node = [v3_Element, v4_CharacterData, v5_Document, v6_DocumentFragment, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|"), v8_AbstractWorker = "AbstractWorker|SharedWorker|Worker", v9_WorkerContext = "WorkerContext|DedicatedWorkerContext|SharedWorkerContext", v10_MediaStream = "MediaStream|LocalMediaStream", v11_Request = "IDBRequest|IDBOpenDBRequest";
  $.dynamicSetMetadata([["AbstractWorker", v8_AbstractWorker], ["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["CharacterData", v4_CharacterData], ["Document", v5_Document], ["DocumentFragment", v6_DocumentFragment], ["DOMTokenList", "DOMTokenList|DOMSettableTokenList"], ["HTMLMediaElement", v1_MediaElement], ["SVGElement", v2_SvgElement], ["Element", v3_Element], ["Entry", "Entry|DirectoryEntry|FileEntry"], ["EntrySync", "EntrySync|DirectoryEntrySync|FileEntrySync"], ["Node", v7_Node], ["WorkerContext", v9_WorkerContext], ["MediaStream", v10_MediaStream], ["IDBRequest", v11_Request], ["EventTarget", [v7_Node, v8_AbstractWorker, v9_WorkerContext, v10_MediaStream, v11_Request, "EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|MediaController|MediaSource|MediaStreamTrack|MessagePort|Notification|Performance|RTCDataChannel|RTCPeerConnection|RTCDTMFSender|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|DOMWindow|IDBDatabase|IDBTransaction|SVGElementInstance|AudioContext|OfflineAudioContext"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"], ["UIEvent", "UIEvent|CompositionEvent|FocusEvent|KeyboardEvent|MouseEvent|WheelEvent|TextEvent|TouchEvent|SVGZoomEvent"], ["CSSValueList", "CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSMixFunctionValue"], ["AudioParam", "AudioParam|AudioGain"]]);
})();

$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field;
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass)
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=client.dart.js.map
